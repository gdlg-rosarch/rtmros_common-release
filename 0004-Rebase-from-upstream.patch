From 5a20234d14bff840eecdf6d32e823f42cf67dcbc Mon Sep 17 00:00:00 2001
From: Kei Okada <k-okada@jsk.t.u-tokyo.ac.jp>
Date: Fri, 21 Mar 2014 04:17:30 +0900
Subject: [PATCH 4/6] Rebase from 'upstream'

---
 .rosinstall                                        |   15 +
 .travis.yml                                        |   79 +++
 README.md                                          |   72 ++
 hrpsys_ros_bridge/CHANGELOG.rst                    |  749 ++++++++++++++++++++
 hrpsys_ros_bridge/CMakeLists.txt                   |  103 ++-
 hrpsys_ros_bridge/catkin.cmake                     |  198 ++++--
 hrpsys_ros_bridge/cmake/compile_robot_model.cmake  |  127 +++-
 .../euslisp/rtm-ros-robot-interface.l              |   11 +
 hrpsys_ros_bridge/launch/hrpsys_ros_bridge.launch  |    2 +-
 hrpsys_ros_bridge/manifest.xml                     |   24 +-
 hrpsys_ros_bridge/package.xml                      |   10 +-
 hrpsys_ros_bridge/scripts/collision_state.py       |   12 +-
 hrpsys_ros_bridge/scripts/default_robot.launch.in  |    8 +
 .../scripts/default_robot_ros_bridge.launch.in     |    5 +-
 .../scripts/default_robot_startup.launch.in        |    7 +-
 hrpsys_ros_bridge/scripts/hrpsys_profile.py        |    5 +-
 hrpsys_ros_bridge/setup.py                         |   11 +
 hrpsys_ros_bridge/test/test-compile-robot.cmake    |   41 ++
 hrpsys_ros_bridge/test/test-compile-robot.sh       |   27 +
 hrpsys_ros_bridge/test/test-compile-robot.xml      |   16 +
 hrpsys_ros_bridge/test/test-pa10.py                |   77 ++
 hrpsys_ros_bridge/test/test-pa10.test              |   20 +
 hrpsys_ros_bridge/test/test-samplerobot.py         |  110 +++
 hrpsys_ros_bridge/test/test-samplerobot.test       |   19 +
 hrpsys_tools/CHANGELOG.rst                         |   84 +++
 hrpsys_tools/CMakeLists.txt                        |    3 +
 hrpsys_tools/catkin.cmake                          |    5 +-
 hrpsys_tools/launch/hrpsys.launch                  |   13 +-
 hrpsys_tools/manifest.xml                          |    3 +
 hrpsys_tools/package.xml                           |    3 +-
 hrpsys_tools/samples/pa10.launch                   |   12 +
 hrpsys_tools/scripts/hrpsys_tools_config.py        |   37 +-
 hrpsys_tools/test/test-hrpsys-config.py            |   39 +
 hrpsys_tools/test/test-hrpsys-config.test          |   24 +
 hrpsys_tools/test/test-pa10.test                   |   19 +
 openrtm_ros_bridge/CHANGELOG.rst                   |  101 +++
 openrtm_ros_bridge/CMakeLists.txt                  |    3 +-
 openrtm_ros_bridge/catkin.cmake                    |   21 +-
 openrtm_ros_bridge/package.xml                     |    2 +-
 .../{samples => test}/test_myservice_rosbridge.l   |    0
 .../{samples => test}/test_myservice_rosbridge.py  |    0
 .../test_myservice_rosbridge.test}                 |    3 +-
 openrtm_tools/CHANGELOG.rst                        |   77 ++
 openrtm_tools/CMakeLists.txt                       |    3 +
 openrtm_tools/catkin.cmake                         |    9 +-
 openrtm_tools/manifest.xml                         |    8 +
 openrtm_tools/package.xml                          |    5 +-
 openrtm_tools/scripts/rtmlaunch.py                 |   23 +-
 openrtm_tools/scripts/rtshell-setup.sh             |   19 +-
 openrtm_tools/test/test-openrtm-tools.test         |    3 +
 openrtm_tools/test/test-rtmlaunch.py               |  135 ++++
 openrtm_tools/test/test-rtmlaunch.test             |   30 +
 openrtm_tools/test/test-rtshell-setup.py           |   25 +
 rosnode_rtc/CHANGELOG.rst                          |   72 ++
 rosnode_rtc/manifest.xml                           |    3 +-
 rosnode_rtc/package.xml                            |    8 +-
 rtmbuild/CHANGELOG.rst                             |  149 ++++
 rtmbuild/catkin.cmake                              |    2 +-
 rtmbuild/cmake/rtmbuild.cmake                      |   11 +-
 rtmbuild/package.xml                               |    2 +-
 rtmbuild/scripts/idl2srv.py                        |    8 +-
 rtmros_common/CHANGELOG.rst                        |   37 +
 rtmros_common/package.xml                          |    2 +-
 63 files changed, 2594 insertions(+), 157 deletions(-)
 create mode 100644 .rosinstall
 create mode 100644 .travis.yml
 create mode 100644 README.md
 create mode 100644 hrpsys_ros_bridge/CHANGELOG.rst
 create mode 100644 hrpsys_ros_bridge/setup.py
 create mode 100644 hrpsys_ros_bridge/test/test-compile-robot.cmake
 create mode 100755 hrpsys_ros_bridge/test/test-compile-robot.sh
 create mode 100644 hrpsys_ros_bridge/test/test-compile-robot.xml
 create mode 100755 hrpsys_ros_bridge/test/test-pa10.py
 create mode 100644 hrpsys_ros_bridge/test/test-pa10.test
 create mode 100755 hrpsys_ros_bridge/test/test-samplerobot.py
 create mode 100644 hrpsys_ros_bridge/test/test-samplerobot.test
 create mode 100644 hrpsys_tools/CHANGELOG.rst
 create mode 100644 hrpsys_tools/samples/pa10.launch
 create mode 100755 hrpsys_tools/test/test-hrpsys-config.py
 create mode 100644 hrpsys_tools/test/test-hrpsys-config.test
 create mode 100644 hrpsys_tools/test/test-pa10.test
 create mode 100644 openrtm_ros_bridge/CHANGELOG.rst
 rename openrtm_ros_bridge/{samples => test}/test_myservice_rosbridge.l (100%)
 rename openrtm_ros_bridge/{samples => test}/test_myservice_rosbridge.py (100%)
 rename openrtm_ros_bridge/{samples/test_myservice_rosbridge.launch => test/test_myservice_rosbridge.test} (77%)
 create mode 100644 openrtm_tools/CHANGELOG.rst
 create mode 100644 openrtm_tools/test/test-openrtm-tools.test
 create mode 100755 openrtm_tools/test/test-rtmlaunch.py
 create mode 100644 openrtm_tools/test/test-rtmlaunch.test
 create mode 100755 openrtm_tools/test/test-rtshell-setup.py
 create mode 100644 rosnode_rtc/CHANGELOG.rst
 create mode 100644 rtmbuild/CHANGELOG.rst
 create mode 100644 rtmros_common/CHANGELOG.rst

diff --git a/.rosinstall b/.rosinstall
new file mode 100644
index 0000000..4460312
--- /dev/null
+++ b/.rosinstall
@@ -0,0 +1,15 @@
+- git:
+    uri: https://github.com/start-jsk/openrtm_aist_core
+    local-name: rtm-ros-robotics/openrtm_common/openrtm_aist_core
+- git:
+    uri: https://github.com/start-jsk/openhrp3
+    local-name: rtm-ros-robotics/openrtm_common/openhrp3
+- git:
+    uri: https://github.com/start-jsk/hrpsys
+    local-name: rtm-ros-robotics/openrtm_common/hrpsys
+- git:
+    uri: https://github.com/start-jsk/rtshell_core 
+    local-name: rtm-ros-robotics/openrtm_common/rtshell_core
+- git:
+    uri: https://github.com/start-jsk/rtmros_common
+    local-name: rtm-ros-robotics/rtmros_common
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..54edc27
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,79 @@
+# Travis Continuous Integration Configuration File, based on ..
+#   Generic MoveIt Travis Continuous Integration Configuration File
+#   Works with all MoveIt! repositories/branches
+#   Author: Dave Coleman, Jonathan Bohren
+language:
+  - cpp
+  - python
+python:
+  - "2.7"
+compiler:
+  - gcc
+env:
+  - ROS_DISTRO=groovy ROSWS=rosws  BUILDER=rosbuild  USE_DEB=true
+  - ROS_DISTRO=groovy ROSWS=rosws  BUILDER=rosbuild  USE_DEB=false
+  - ROS_DISTRO=groovy ROSWS=wstool BUILDER=catkin    USE_DEB=true
+  - ROS_DISTRO=groovy ROSWS=wstool BUILDER=catkin    USE_DEB=false
+  - ROS_DISTRO=hydro  ROSWS=wstool BUILDER=catkin    USE_DEB=true
+  - ROS_DISTRO=hydro  ROSWS=wstool BUILDER=catkin    USE_DEB=false
+notifications:
+  email:
+    recipients:
+      - k-okada@jsk.t.u-tokyo.ac.jp
+      - iisaito@opensource-robotics.tokyo.jp
+    on_success: always #[always|never|change] # default: change
+    on_failure: always #[always|never|change] # default: always
+before_install: # Use this to prepare the system to install prerequisites or dependencies
+  # Define some config vars
+  - export CI_SOURCE_PATH=$(pwd)
+  - export REPOSITORY_NAME=${PWD##*/}
+  - echo "Testing branch $TRAVIS_BRANCH of $REPOSITORY_NAME"
+  - sudo sh -c 'echo "deb http://packages.ros.org/ros-shadow-fixed/ubuntu precise main" > /etc/apt/sources.list.d/ros-latest.list'
+  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
+  - sudo apt-get update -qq
+  - sudo apt-get install -qq -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-catkin
+  - if [ $ROSWS == rosws ]; then sudo apt-get install -qq -y python-rosinstall     ; fi
+  - if [ $BUILDER == rosbuild ]; then sudo apt-get install -qq -y ros-$ROS_DISTRO-rosmake ; fi
+  # Setup rosdep
+  - sudo rosdep init
+  - rosdep update; while [ $? != 0 ]; do sleep 1; rosdep update; done
+install: # Use this to install any prerequisites or dependencies necessary to run your build
+  # Create workspace
+  - mkdir -p ~/ros/ws_$REPOSITORY_NAME/src
+  - cd ~/ros/ws_$REPOSITORY_NAME/src
+  - if [ $USE_DEB == false -o $BUILDER == rosbuild ]; then $ROSWS init .   ; fi
+  - if [ $USE_DEB == false ]; then $ROSWS merge http://raw.github.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.rosinstall ; fi
+  - if [ $USE_DEB == false -o $BUILDER == rosbuild ]; then if [ $ROSWS == rosws ]; then $ROSWS merge /opt/ros/$ROS_DISTRO/.rosinstall; fi  ; fi
+  - if [ $USE_DEB == false ]; then sed -i "s@^\(.*github.com/$TRAVIS_REPO_SLUG.*\)@#\1@" .rosinstall               ; fi # comment out current repo
+  - if [ $USE_DEB == false ]; then $ROSWS update   ; fi
+  - if [ $USE_DEB == false -o $BUILDER == rosbuild ]; then $ROSWS set $REPOSITORY_NAME http://github.com/$TRAVIS_REPO_SLUG --git -y        ; fi
+  - ln -s $CI_SOURCE_PATH . # Link the repo we are testing to the new workspace
+  - cd ../
+  # Install dependencies for source repos
+  - find -L src -name package.xml -exec dirname {} \; | xargs -n 1 -i find {} -name manifest.xml | xargs -n 1 -i mv {} {}.deprecated # rename manifest.xml for rosdep install
+  - rosdep install -r -n --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y
+  - find -L src -name manifest.xml.deprecated | xargs -n 1 -i dirname {} | xargs -n 1 -i ln -sf `pwd`/{}/manifest.xml.deprecated `pwd`/{}/manifest.xml # rename manifest.xml for rosdep install
+  - find . \! -path "*/.*" -type f | xargs egrep -i "(hoge|fuga)" ; if [ $? == 0 ]; then exit 1; fi
+before_script: # Use this to prepare your build for testing e.g. copy database configurations, environment variables, etc.
+  - source /opt/ros/$ROS_DISTRO/setup.bash
+  - if [ $BUILDER == rosbuild ]; then source src/setup.bash        ; fi
+  - if [ $BUILDER == rosbuild ]; then rospack profile              ; fi
+script: # All commands must exit with code 0 on success. Anything else is considered failure.
+  # for catkin
+  - if [ $BUILDER == catkin ]; then catkin_make -j8 -l8            ; fi
+  - if [ $BUILDER == catkin ]; then export TARGET_PKG=`find build/$REPOSITORY_NAME -name Makefile -print |  sed s@.*/\\\\\([^\/]*\\\\\)/Makefile@\\\1@g` ; fi
+  - if [ $BUILDER == catkin ]; then catkin_make test --pkg $TARGET_PKG -j8 -l8  ; fi
+  - if [ $BUILDER == catkin ]; then find build -name LastTest.log -exec echo "==== {} ====" \; -exec cat {} \;  ; fi
+  - if [ $BUILDER == catkin ]; then catkin_make -j8 -l8 install            ; fi
+  - if [ $BUILDER == catkin ]; then rm -fr devel src build                 ; fi
+  - if [ $BUILDER == catkin ]; then source install/setup.bash              ; fi
+  - if [ $BUILDER == catkin ]; then export EXIT_STATUS=0; for pkg in $TARGET_PKG; do [ "`find install/share/$pkg -iname '*.test'`" == "" ] && echo "[$pkg] No tests ware found!!!"  || find install/share/$pkg -iname "*.test" -print0 | xargs -0 -n1 rostest || export EXIT_STATUS=$?; done; [ $EXIT_STATUS == 0 ] ; fi
+  # for rosbuild
+  - if [ $BUILDER == rosbuild ]; then rosmake -a --profile --pjobs=8       ; fi
+  - if [ $BUILDER == rosbuild ]; then export TARGET_PKG=`find -L src | grep $REPOSITORY_NAME | grep /build/Makefile$ | sed s@.*/\\\\\([^\/]*\\\\\)/build/Makefile@\\\1@g` ; fi
+  - if [ $BUILDER == rosbuild ]; then rosmake --test-only $TARGET_PKG --pjobs=8 ; fi
+after_failure:
+  - if [ $BUILDER == rosbuild ]; then find ${HOME}/.ros/rosmake/ -type f -exec echo "=== {} ===" \; -exec cat {} \; ; fi
+  - find ${HOME}/.ros/test_results -type f -exec echo "=== {} ===" \; -exec cat {} \;
+  - for file in ${HOME}/.ros/log/rostest-*; do echo "=== $file ==="; cat $file; done
+
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..04531d0
--- /dev/null
+++ b/README.md
@@ -0,0 +1,72 @@
+rtmros_common  [![Build Status](https://travis-ci.org/start-jsk/rtmros_common.png)](https://travis-ci.org/start-jsk/rtmros_common)
+-------------
+
+A package suite that provides all the capabilities for the ROS users to connect to the robots that run on RT Middleware or RTM-based controllers.
+
+
+--------------
+
+This document explains how to use and how to contribute to rtm-ros-robotics softwares ([openrtm_aist_core](https://github.com/start-jsk/openrtm_aist_core), [openhrp3](https://github.com/start-jsk/openhrp3), [hrpsys](https://github.com/start-jsk/hrpsys), [rtshell_core](https://github.com/start-jsk/rtshell_core), [rtmros_common](https://github.com/start-jsk/rtmros_common), [rtmros_hironx](https://github.com/start-jsk/rtmros_hironx), [rtmros_tutorial](https://github.com/start-jsk/rtmros_turorial), [rtmros_gazebo](https://github.com/start-jsk/rtmros_gazebo)). The instruction uses `rtmros_common` repository as an example, but also works for other rtm-ros-robotics repositories.
+
+1. Install software
+ rtm-ros-robotics software is distributed as ros-debian packages, if you already uses ROS system, install the software as follows:
+ - `sudo apt-get install ros-$ROS_DISTRO-rtmros-common`
+ 
+ If you did not installed ROS sysem, please follow [this instruction](http://wiki.ros.org/hydro/Installation/Ubuntu).
+ - ``sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -a` main" > /etc/apt/sources.list.d/ros-latest.list'``
+ - `wget http://packages.ros.org/ros.key -O - | sudo apt-key add -`
+ - `sudo apt-get update`
+ - `sudo apt-get update ros-hydro-base` # you may use ros-groovy-base if you want
+ - `sudo rosdep init`
+ - `rosdep update`
+ - `source /opt/ros/hydro/setup.bash` # it is better to source ROS environment everytime terminal starts (`echo "source /opt/ros/hydro/setup.bash" >> ~/.bashrc`)
+
+2. Compile from source code
+ You may have two choice, one is to compile all rtm-ros-robotics source code, other is to compile target repository.
+ First, create catkin workspace
+ - `mkdir -p ~/catkin_ws/src`
+ - `cd ~/catkin_ws/src`
+ - `catkin_init_workspace`
+ - `wstool init .`
+ 
+ If compile all source code
+ - `wstool merge https://raw.github.com/start-jsk/rtmros_common/master/.rosinstall -y`
+ 
+ Else if compile only targe repository
+ - `wstool set rtm-ros-robotics/rtmros_common https://github.com/start-jsk/rtmros_common --git -y`
+ 
+ Both methods needs following procedures.
+ - `wstool update `
+ - `cd ..`
+ - `source /opt/ros/hydro/setup.bash`
+ - `rosdep install -v -r --from-paths src --ignore-src --rosdistro hydro -y`
+ - `catkin_make`
+
+3. Contributes to rtm-ros-robotics projects.
+ - First fork the target repository on GitHub
+ - Move to the package direcotry
+ - `source ~/catkin_ws/devel/setup.bash`
+ - `roscd rtmros_common`
+ -  create branch for your fix
+ - `git checkout -b your_awesome_code_branch`
+ -  write awesome code and commit to local repo
+ -   ... wite code....
+ - `git commit -m "detailed description of what you did"`
+ -  Add your forked repository as upstream
+ - `git remote add experimental https://github.com/<your github user name>/rtmros_common`
+ - `git push experimental your_awesome_code_branch`
+ - Submit a pull request on GitHub to the repository
+ - Please check travic-ci status after sending your pull request.
+
+4. Uses other forked repository *before* merged into master.
+
+You don't need to wait for the maintainers to merge some pull requests by others
+before you use them.
+ - Adding other's remote repository to your git remote
+ - `git remote add <awesome-fork> https://github.com/<user>/rtmros_common`
+ - Fetch branches from the remote.
+ - `git fetch <awesome-fork>`
+ - Merge those remote branch into your current branch
+ - `git merge <awesome-fork>/<branch-name>`
+
+
diff --git a/hrpsys_ros_bridge/CHANGELOG.rst b/hrpsys_ros_bridge/CHANGELOG.rst
new file mode 100644
index 0000000..be6b5aa
--- /dev/null
+++ b/hrpsys_ros_bridge/CHANGELOG.rst
@@ -0,0 +1,749 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package hrpsys_ros_bridge
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+* hrpsys_ros_bridge: add test-compile-robot.sh test-compile-robot.xml  test-compile-robot.cmake
+* check hrpsys_ros_bridge SOURCE_DIR for both SOURCE_DIR and PREFIX
+* hrpsys_ros_bridge: use catkin package of pr2_controllers_msgs
+* hrpsys_tools, hrpsys_ros_bridge: increase retly to 4 for test
+* hrpsys_ros_bridge: install/lib/python2.7/dist-packages/hrpsys_ros_bridge/__init__.py disappeared somehow? this is  temprarily fix (FIXME)
+* hrpsys_ros_bridge: fix compile_robot_model.cmkae, use find_package to set /lib/openrtm_aist/bin/rtm-naming /lib/openhrp3/export-collada
+* collision_state.py: display with logwarn when CollisionDetector is not found
+* hrpsys_ros_bridge, fix path for installed conf/dae/launch files
+* compile_robot_model.cmake: add debug message in generate_default_launch_eusinterface_files
+* hrpsys_ros_bridge: (test-samplerobot.py, test-p10.py), increase timeout of watForTransform() and catch exception if tf is not found
+* collision_state, wait until co is found, if not found exit with 0, not 1
+* hrpsys_profile.py add Exception
+* hrpsys_ros_bridge: add collada_urdf to depends
+* hrpsys_profile.py: run hrpsys_profile within try block
+* hrpsys_profile.py: remove undefined variables
+* hrpsys_ros_bridge: add visualization_msgs to depeds
+* hrpsys_ros_bridge: fix ProjectGenerator location, see #353
+* hrpsys_ros_bridge: add test code for samplerobot and pa10
+* hrpsys_ros_bridge: add diagnostic_aggregator to depend (manifest.xml package.xml)
+* hrpsys_ros_bridge: add more args to default_robot_*.in (GUI, SIMULATOR_NAME, corbaport)
+* add comment on why we remove depend to pr2_controllers_msgs
+* (package.xml) add angles to build_depend intentinally dut to build_depend to tf does ont install angles
+* (manifest.xml) commented out depend package pr2_controllers_msgs for rosmake dependency graph generation, but comment in for rosmake build objects
+* (manifest.xml) if you have both rosdep and depend, rosmake does not work well, see https://github.com/jsk-ros-pkg/jsk_common/issues/301
+* (manifest.xml) users are expected to manually install ros-groovy-pr2-dashboard
+* (CMakeLists.txt) download pr2_controllers_msgs for groovy/rosbuild
+* fix typo ;; elif -> elseif
+* add
+* Wrong catkin macro (CATKIN-DEPENDS to CATKIN_DEPENDS).
+* change destination of stdout of rtmlaunch.py by OUTPUT arg
+* add CMAKE_PREFIX_PATH so that rosrun hrpsys ProjectGenerator works
+* Merge pull request #334 from k-okada/master
+* add openhrp3_PREFIX, more debug message
+* add / after hrpsys_idl_DIR
+* add hrpsys to find_package
+* add more verbose log when error
+* update PKG_CONFIG_PATH for hrpsys-base
+* display error output
+* add depend to pkg-config
+* add depend to pkg-config
+* added euslisp, srv, idl directories to install
+* move to git repository
+* add hrpsys to find_package
+* add more verbose log when error
+* Merge branch 'master' of http://github.com/k-okada/rtmros_common
+* display error output
+* add depend to pkg-config
+* add depend to pkg-config
+* update PKG_CONFIG_PATH for hrpsys-base
+* Merge branch 'master' into garaemon-master
+* not generating sh but running rostes directory to avoid escape problem
+* Merge branch 'master' of http://github.com/k-okada/rtmros_common
+* use pkg-config to find directories
+* Merge branch 'master' of https://github.com/start-jsk/rtmros_common
+* move to git repository
+* added euslisp, srv, idl directories to install
+* fixing list syntax
+* force to set ROS_PACKAGE_PATH when calling euscollada for catkin build
+* adding LD_LIBRARY_PATH
+* remove depend to robot_monitor
+* changing the working directory when call export-collada
+* do not compile lisp code if euxport collada is not exists
+* add diagnositcs_msgs to fake rosdep
+* add dynamic_recofigure to fake rosdep
+* add several rosdep names to fake rosdep
+* add rosdep hrpsys/openrtm_aist to fake rosdep
+* profibit to run rostest parallel
+* installing src directory as python package
+* (hrpsys_ros_bridge/package.xml) Partially revert r6936 where a dependency was removed by mistake.
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+* (rtmros_common, openrtm_ros_bridge, hrpsys_ros_bridge) Cleaning and elaborating package.xml
+* add setting for CONF_DT_OPTION
+* set corba port to 15005 in euslisp model dump function
+* fix proble due to r6908, also remove find_package since hrpsys can not find-packed-ed
+* add hrpsys_tools to depends on openrtm_tools, see Issue 309
+* set custom cmake file under CFG_EXTRAS, so that other package is abel to use macros defined in the cmake file
+* generate /tmp/_gen_project_**.sh file to invoke rostest since rostest needs package path, see Issue 306
+* installing euslisp directory of hrpsys_ros_bridge when catkining
+* not use rosbuild for catkin
+* fixing close tag in nosim.launch
+* add RUN_RVIZ arg in default launch template files
+* add REALTIME arg in hrpsys-simulator launch template files
+* fix position of long floor
+* add :torque-vector for playpattern
+* add reference torque vector data reading
+* update initialization to neglect log files which lines are not match ;; convert rad2deg
+* fix typos ;; wf -> zf
+* add .zmp file dump
+* add fname for datalogger-log-parser
+* use .rviz file for .in file
+* add datalogger log parser for euslisp
+* enable to se PROJECT_FILE name
+* remove unnecessary print function
+* fix hrpsy_ros_bridge.launch for hrpsys version 315.1.5
+* add :zmp-vector and callback ;; acc print function for end_effectors in conf file
+* add argument for tm
+* add type_name to SensorInfo ;; use it in imu_floor tf sending ;; for almost all robots, frame name is 'gyrometer'
+* write seq pattern file separatively ;; do not dump .waist file if :root-coords does not exist
+* publish zmp as PointStamped
+* add zmp data port for HrpsysSeqStateRosBridge
+* add euslisp utility fnuction for seq pattern file
+* fix syntax error
+* set_stale when op_mode is not Servo ON nor Servo Off
+* move hrpsys_profiel out of USE_DIAGNOSTICS
+* rename USE_DIAGNOSTICS <- LAUNCH_DIAGNOSTICS args
+* add LAUNCH_DIAGNOSTICS args
+* add use_diagnostics, use_rosout, use_battery option in __init__
+* using prefix for sensor-name
+* add debug print, when body->joints().size() and m_servoState.data.length() is not equal
+* split hrpsys_dashboard into hrpsys_dashboard and src/hrpsys_ros_bridge/hrpsys_dashboard.py, see Issue 270
+* fix color
+* change sphere radius depends on dangerness
+* rosbuild does not raise exception when import roslib, use import hrpsys
+* add utility functions for project generator xml file
+* add argument to set timeStep according to hrpsys-base -r905 commit ;; we can set timeStep <= dt ;; http://www.openrtp.jp/openhrp3/jp/create_project.html
+* enable to add :root-coords which is optional robot states
+* fix typo ;; tile -> time
+* change line width depends on the distance
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+* reverse rpy-angle because euslisp rpy is 'yaw pitch roll' and openhrp3 rpy is roll pitch yaw
+* pkill kill cmake itself, not why, so create shell script and execute it
+* use find_package for hrpsys and hrpsys_tools
+* fix Issue 256
+* do not depends to lisp file if euscollada is not exists
+* fix missing variable _collada2eus to _collada2eus_exe
+* do not FATAL_ERROR when collada2eus is not found
+* fix for catkin compile
+* add debug message
+* use full path instead of rosrun/rostet for when two binaries are installed
+* fix for catkin, catkin does not requires load_manifest
+* apply patch in Issue 254
+* fix ROS_DISTRO->groovy, this code only used in groovy
+* fix sed command
+* fix typo ENV=>
+* add rostest to run_depend
+* set pr2_controllers to build/run depends and fix catkin.cmake to comment out therese tags if groovy
+* distance under 0.05 always red
+* translate line information relative to root_link_frame
+* add lifetime
+* add standalone collision detector launch file, see #249
+* fix color
+* add error message more verbose
+* catch CORBA.OBJECT_NOT_EXISTS
+* rename typo collistion_state.py  collision_state.py
+* add collistion_state.py in launch file, Issue 249
+* add collistion_state.py, Issue 249
+* fix length of force list for resetting
+* fix compile_openhrp_model for catkin, see Issue 241
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+* update with r5733
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+* remove :start and :stop abc in go-pos and go-velocity
+* update to use from hrpsys.hrpsys_config import \*, due to change at https://code.google.com/p/hrpsys-base/issues/detail?id=128, Fixed Issue 231, Fixed Issue 219
+* add end-effector parameter print function for abc
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+* use connection as new
+* add calc-zmp-from-state method
+* add loading of utils file if exists
+* fix typoes ;; _name -> _sname
+* get current additional_make_clean_files and append setting to it ;; use _sname instead of overwriting _name
+* add generated launch and euslisp files to clean target
+* fix when rtmros_common is installed as catkin package, see Issue 214
+* install cmake directory
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* hrpsys_ros_bridge) fix to issue 205 (incomplete but worth trying)
+* hrpsys_ros_bridge) Correction to r5584.
+* hrpsys_ros_bridge) Improve package.xml description.
+* add pr2_dashboard path to sys.path for those who could not import pr2_dashboard
+* add comment when pr2_dashboard is not found
+* hrpsys_dashboard) Fix to run with rosbuild.
+* hrpsys_ros_bridge) add Isaac as a maintainer to get notice from buildfarm.
+* add diagnostic_msgs to depends
+* add roslang to depend
+* use rtmbuild_PREFIX instaed of CMAKE_INSTALL_PREFIX to get rtmbuild.cmake
+* fake rospack not to sudo rosdep install
+* add python-rosdep and rosdep udpate to different execute_process
+* do not set local for jenkins debuild
+* copy rtmlaunch/rtmtest/rtmstart.py to both share and bin for backword compatibility
+* add random string to pr2_controllers_msgs directory path
+* workaround for ros-groovy-rqt-top installs wrong(?) psutil
+* fix for new rtmstart.py
+* add LC_ALL=en_US.UTF-8
+* fix syntax error on previous commit
+* add rosdep update when compile pr2_controlers_msgs
+* unset \*_LIBRARIES not to add library names to Config.cmake
+* add python-psutil to depend
+* add rosbuild to depends
+* add mk
+* add --non-interactive --trust-server-cert for svn
+* use corba port number 15005
+* install rtmtest and rtmstart.py
+* remove svn:executable from rtmstart.py
+* add rtmtest.py from rtmlaunch in order to add rtmtest, add alias rtmtest to rtshell-setup.sh
+* add subversion for groovy, that download and compile non-catkinized pr2_controllers_msgs package
+* download and compile pr2_controllers msgs which is not catlinized on groovy
+* pr2_controllers is not catkinized on groovy
+* add pr2_controllers to bulid/run_depend and use ROS_DISTRO to include pr2_controller_msgs directory
+* add code for restarting jointGroup
+* add remove-joint-group and remove obsolate code
+* fix directory structure, see Issue 188
+* add generating code of controller_config.yaml for using joint group
+* checking the existance all joints in required group on HrpsysJointTrajectoryBridge (ignore not existing joint)
+* fix : rearrange joint order in required goal
+* forget to fix corba port to 15005, see Issue 141
+* fix catkin.cmake for installed project
+* add import OpenRTM_aist.RTM_IDL, for catkin
+* print error message on detection of nan in imu_floor tf
+* install FILES does not need USE_SOURCE_PERMISSIONS
+* fix catkin.cmake, since openrtm_aist/openhrp3/hrpsys is compiled as non-catkin package (this means catkin_make does not install <package>.pc <package>Config.cmake and use DEPENDS not CATKIN-DEPENDS)
+* fix to work on both rtmbuild and catkin environment
+* ignore srv files whose name starts with . in rtm-ros-robot-interface, closes Issue 149
+* fix for catkin
+* check if port_number(5005) is already used, Fixed Issue 141
+* comment out pr2_controllers
+* change pr2_controllers_msgs -> pr2_controllers
+* set default corbaport to 5005, Fixes Issue 141
+* fix method name for set-joint-angles-of-group
+* add add_dependencies to compile_hrpsys
+* fix copy idl file from hrpsys/idl
+* install rtmbuild from rtmbuild_SOURCE_DIR/CMAKE_INSTALL_DIR
+* fix typo ;; COLLISIONCHEC => COLLISIONCHECK
+* print name of ports
+* add arguments to specify generated files
+* add arguments to specify file generation
+* rename macro ;; fix typo
+* add nosim template and fix euslisp file name
+* add macro to generate default launch files and euslisp interface
+* wirte more debug comment to ROS_INFO_STREAM
+* hrpsys_ros_bridge) Delete unused dependency. Alphabetize dependency.
+* Remove unused components (robot_monitor).
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Updated all package.xml in rtmros_common metapkg (add URLs, alphabetized, cleanup, add Isaac as a maintainer to receive notice from buildfarm).
+* check if USE_ROSBUILD is defined
+* fix 2888 -> 2890 according to discussion of http://code.google.com/p/rtm-ros-robotics/issues/detail?id=139
+* fix for catkin, with USE_ROSBUILD
+* catkinize package
+* add depends to openrtm_ros_bridge
+* add openrtm_tools as depend
+* add depends to hrpsys_tools
+* workaround for Issue 150
+* use hrpsys_ros_bridge for generating ROS service methods
+* rtmlaunch.py was moved to openrtm_tools
+* import from hrpsys_ros_bridge.srv instead of hrpsys.srv
+* minor change
+* hrpsys.launch now goes under hrpsys_tools and rename hrpsys.py to hrpsys_config
+* add depends from hrpsys to hrpsys_tools, (hrpsys_tools to hrpsys is also exists, this this is intentially looped) so that users just depends on hrpsys
+* change INCLUDE_DIRS from {prefix}/idl_gen/cpp/{prefix}/idl to {prefix}/idl_gen/cpp, so need to include <prefix/idl/hoge.h> instead of <hoge.h>, Issue 137
+* ProjectGenerator is under hrpsys_tools not hrpsys: cleanup hrpsys, split hrpsys and hrpsys_tools, Issue 137
+* copy idl from hrpsys/share/hrpsys/idl to hrpsys_ros_bridge/idl, Issue 137
+* add depends to hrpsys_tools, Issue 137
+* update openrtm -> openrtm_aist, hrpsys -> hrpsys_toolss: cleanup hrpsys, split hrpsys and hrpsys_tools, Issue 137
+* fix port num ;; 2888 -> 2889
+* run omniNames with port 2888 in compile_openhrp_model
+* add USE_ROBOTHARDWARE
+* check if server is active before send set preempt, this enables exit component cleanly, related to Issue 47
+* fix miss commit ;; add temperature
+* enable to store extra_data of motor_states
+* use PeriodicExecutionContext instead of hrpExecutionContext, Issue 136
+* launch node within group tags not to invoke unused component, see Issue 114
+* add dt conf file option
+* remove unnecessary copying of return value
+* add _ret_add_str and remove duplicate codes
+* fix position of return value setting
+* do not specify if base-name is nil
+* add connection for hrpsys_ros_bridge
+* add dependency of _xmlfile on _xmlfile_nosim to achieve exclusive execution of rostest
+* print port name in sensor_ros_bridge_connect
+* adding some wait for waiting to update rosnode information
+* fix return value if limb is nil
+* fix separator of macro argumens
+* fixes Issue 64, some packaed does not depends on euscollada, invoke rtm-naming within add_custom_command
+* add dependency on euscollada, export-collada, and _gen_project.launch
+* rename -xxx options -> --xxx options
+* specify 2888 in pkill
+* add macros to obtain options for _gen_project.launch and euscollada
+* add get_option macro
+* add INTEGRATE argument
+* start model loader with 2888 port when launch _gen_project.launch
+* do not make error, when collada2eus is not found, some package(hironx_ros_bridge) does not depends on euslisp
+* add xml nosim to target
+* add nosim option and generate nosim xml
+* add robothardware conf option
+* rename abs_xx -> off_xx
+* add compile_collada_model to ALL
+* fix (arg SIMULATOR_NAME)0 -> (arg SIMULATOR_NAME)
+* rtmlauch.use_if.py -> rtmlaunch.py
+* cleanup hrpsys_ros_bridge.launch, use if group, by miyake. Issue 114
+* enable to load only link offset ;; use average value
+* fix typo ;; params -> param
+* add :reset-force-moment-offset
+* support euslisp style argument for forcemoment and impedance methods
+* use euscollada-model's :force-sensor methods instead of get-force-sensor-from-limb-name
+* revert to use force-vector and moment-vector
+* update to use absolute force vector for calibration
+* add :imucoords method
+* add port and connection for absolute force sensor values
+* use AbsoluteForceSensor for impedanc Controller
+* call :update-robot-state in super's :state methods
+* check return value of imucoords from TF
+* call rtc_init before rospy.init so that Issue 117
+* neglect arguments added by roslaunch
+* add rtmlaunch that runs omninaming and runs roslaunch, Issue 105, this is not tested on NameServer running on remote computer, see to https://code.google.com/p/hrpsys-base/issues/detail?id=117
+* imu reading of update-robot-state
+* fix wrong length of angles while uing JointGroup
+* add ForwardKinematicsServiceROSBridge
+* cleanup launch file Issue 114
+* fix: condition for checking num of publisher
+* fix: using walltime for waiting timeout
+* remove miss commited comment out
+* tf::Matrix3x3 causes compilation error in electric. use btMatrix3x3 instead
+* do not publish tf which contains nan values
+* chnage: detecting num of /clock publisher before starting and stoping subscribe /clock
+* update footstep interface for abc
+* add print message in starting
+* add vel ratio
+* add cmd vel mode
+* check hrp::link parent existence because joint state with no name is published at previous version ;; This is OpenHRP3 'WAIST' joint specification. I should check OpenHRP3 model loading
+* select a timestamp of force sensor messages according to use_sim_time
+* get root-link name in :state :imucoords.
+* add default-double-support-ratio setting
+* add robothardware conf setting
+* add macros for export_collada_option and conf_file_option
+* add stabilizer methods
+* comment out target_name and base_name and support default zmp offset
+* add optional argument to collada2eus
+* add stabilizer ros bridge
+* enable to specify calib offset
+* rename make pose function ;; support nodisplay usage
+* add force sensor calib program
+* add load-forcemoment-offset-param method
+* add interface to specify sensor offset
+* enable to access force-sensor by limb name
+* make models directory in compile model macros when it doesn't exist
+* set RobotHardware0 by default for SIMULATOR_NAME
+* use SIULATOR_NAME instead of ROBOT_NAME in hrpsys_ros_bridge.launch ;; ROBOT_NAME argument in hrpsys_ros_bridge.launch is still remained for compatibility but please do not use ROBOT_NAME
+* support limb name usage
+* fix typos and add virtual force sensor stop method
+* add connection for virtual force sensor
+* fix keyword of set-servo-gain-percentage
+* fix naming rule of virtual force sensor and fix quaternion -> axisangle
+* add CONF_FILE_ARG and specify vitual_force_sensor by using conf file
+* specify rtc manager name
+* specify nameserver name and CORBA_init args
+* rename value -> default
+* use WAIST if base-name is nil ;; Is this correct?
+* remove depends to pr2_dashboard for groovy, wait for fix
+* change a name of imu tf and add a method to get imu coords in rtm-ros-robot-interface
+* fix :set-base-pose in rtm-ros-robot-interface.l
+* fix for publishing warning message
+* add connection from state_holder(qOut) to rosbridge(mcangle)
+* comment out port for RobotHardwareService because Simulator does not have RobotHardwareService
+* add comment for groovy
+* remove rtconnects between RobotHardware and KalmanFilter; this is achieved by hrpsys.py instead
+* comment the IMU related rtconnects out for non IMU robots
+* add basePos and baseRpy to HrpsysSeqStateROSBridge and connect in hrpsys_ros_bridge.launch
+* modify rtm-ros-robot-interface.l: add set-servo-error-limit and set-soft-error-limit
+* modify hrpsys_ros_bridge.launch to execute RobotHardwareServiceROSBridge and SoftErrorLimiterServiceROSBridge
+* add default rate to hrpsys_ros_bridge
+* check sensor existence for HRP4C
+* use regiterInport for gyrometer and gsensor
+* fix walking command and example
+* use automatically generated methods
+* add define-all-ROSBridge-srv-methods to define srv methods from srv and idl files ;; currently comment out
+* add comments to hrpsys.py
+* add getSensors and use it
+* fix for hrpsys-base's r693 commit ;; fix for acc and rate naming rules
+* make class to configure hrpsys RTCs and data ports
+* add StateHolder rosbridge
+* set subscription type new for real robot
+* set subscription type new for real robot
+* change name of a method for logger (Issue 74)
+* add method for logger, Flxed Issue 74
+* added rtconnect of torque in hrpsys_ros_bridge.launch
+* remove autobalancer methods from sample
+* add target2foot_offset_pos and rot
+* add methods for get and set parameters for ABC
+* enable multiple --conf-file-option
+* add AutoBalancer for hrpsys.py and launch files
+* add methods for auto balancer RTC
+* add method to dump pattern file for Seq
+* update check of virtual force sensor impedance control and add seq loadPattern
+* enable to specify conf file setting for _gen_project.launch
+* support virtual force sensor usage
+* add sensor_ros_bridge_connect to connect sensor data ports based on ModelLoader's sensor information
+* re-organize code, use IDL style method name for each service/idl and use euslisp style method name for wrapper of them
+* enable to get force-vector and moment-vector
+* add removeforcesensor offset interface
+* add getImpedanceControllerParam and enable to set parameter individualy
+* fix potision of argument in :start-impedance-impl
+* fix typo ;; start-impedance in stop-impedance
+* fix condision of limb for start and stop impedance
+* add yaml depend in hrpsys_ros_bridge
+* use :force-sensor method
+* use root-link's parent by default
+* fix bug of send*
+* add methods for impedance controller
+* fix name : use upper case for argument, (Fixes issue 65)
+* add launch_ros_model argument to hrpsys_ros_bridge.launch
+* fix number of clock publisher ;; publisher ==1 means no clock publisher other than HrpsysSeqRosBridge, which means HrpsSeqRosBridge should publish /clock
+* add ImpedanceCOntroller service ROS Bridge
+* check use_sim_time
+* do not publish /clock when othre node pulishes
+* rm config, no longer used?
+* fix : move hrpsys_ros_bridge exmaple codes to hrpsys_ros_bridge_tutorials
+* move hrpsys_ros_bridge exmaple codes to hrpsys_ros_bridge_tutorials
+* add CollisionDetectionService interface to rtm-ros-robotics-interface.l
+* add CollisionDetectorService
+* add import time for sleep
+  Use one depth queue for avoid sending multiple servo off message, Issue 32
+  Status: Fixed
+* add setServoGainPercentage which is euslisp interface for idl2srv of RobotHardware RTC
+* add controller configuration file to hironx_ros_bridge.launch
+* add HIRONX_controller_config.yaml
+* Added Log button to hrpsys_dashboard to call DataLoggerService/save
+* add comment to why we need r3202
+* add hrp4c sample for using joint group
+* fix for using joint group
+* add HrpsysJointTrajectoryBridge for using joint group
+* fix directory name
+* fix directory name
+* mv euslisp programs to euslisp directory
+* revert CMakeLists.txt
+* add test code for calling seq group
+* add comments
+* add debug message to set-interpolation
+* add :setBasePose method to rtm-ros-robot-interface.l
+* add sequenceplayserservicerosbridge node
+* fix by iori
+* remove glc_cpature from rviz node
+* fix for hrpsys 3.1.4
+* support control_msgs/FollowJointTrajectoryAction
+* update SIMULATOR NAME, set use_sim_time true
+* remove debug code
+* publich /clock from rsangle when /use_sim_time is true
+* add euslisp interface for CollisionDetectorService.idl #37
+* Comment out camera port connection in the simulator because it lacks lack versatility
+* Changed StateHolder name from StateHolder to sh.
+  Modified rviz argument from --sync to -sync. In electric, rviz may not work correctly.
+* add emergence_stop.py
+* adopted hrpsys_dashboard to fuerte.
+* fix virtual force sensor setup
+* check High Temperature
+* mv SensorInfo to Impl, add virtual force sensor information
+* support virtual_force_sensor option
+* split diagnostics.py into diagnostics.py and  motor_states.py
+* add calib done, power on, servo alarm message to diagnostics
+* add motor section
+* write motor status to diagnostic
+* add power indicator
+* send servo alarm
+* fix : update for hrpsys-base update
+* update for hrpsys-base update
+* fix hrpsys_profile, clean up codes
+* fix gyrometer and gsensor to use TimedAcceleratoin3D and TimedAngularVelocity3D
+* add darwin-vrml-file-path to reduce webots dependent path description
+* use ros::resolve-ros-path instead of defined function get-rospack-find-str
+* fix only indent
+* fix file-name probing committed at r3127 ;; probe-file webots original vrml file instead of generated openhrp3 path
+* ignore if DARwInOp.proto is not found
+* set default rate to 10 ; this process consumes cpu power so much
+* pre calculate sensor tf information
+* remove old features, diagnositcs and JointTempleture, now we can you hrpsys_profile.py and servoState
+* add extra_data for hrpsys-base revision 417
+* read force sensor size and name from model file
+* fix due to hrpsys update
+* clean up code, add error handling code
+* add diagnostics.py, diagnostics_aggregator and hrpsys_profile
+* add hrpsys_profile.py
+* set red icon if servo off
+* fix servoState data type from TimedLongSeq -> TimedLongSeqSeq
+* fix servoState data type from TimedLongSeq -> TimedLongSeqSeq
+* specify simulator and robothardware names by using SIMULATOR_NAME
+* fix usage of StateHolder ;; use qIn and qOut as reference angle-vector value ;; fix related launch files
+* round time value ;; we assume time stamp in walk2m.pos is integer
+* use rootlink_name, since calling bodyinfo->links() in onExecute consumes memory?
+* call goActual before servo on
+* serv off is not error
+* add Mode
+* add diagnostics.py to publish /Mode/Operating Mode/{Servo On,Servo Off}
+* pusblish odom->bodyinfo->links()[0].segments[0].name
+* fix HRP4C walk2m.pos data path
+* fix HRP4C model path
+* add servoState
+* add servoState
+* fix typo hrpsys_dashboarad -> hrpsys_dashboard
+* fix servo on/servo off
+* use OpenRTM timer for publish ROS message
+* fix link_name -> name for new openhrp3 3.1.3
+* use args for realtime_cpu_monitor.py
+* fix params robot_monitor
+* add robot_monitor and diagnostic.yaml
+* add hrpsys_dashboarad
+* add depends to dashboard/robot_monitor
+* add diagnostics_pub
+* use hrpEC
+* start up DataLoggerService in hrpsys ros bridge launch
+* add save log method
+* add KILL_SERVERS arguments to samplerobot_startup.launch
+* support KILL_SERVERS argument, set false as default
+* subscribe motor_states in initializatoin ;; add :temperature-vector
+* define rtm-ros-robot-interface to use hrpsys_ros_bridge dependent codes
+* add MotorStates.msg and publish it in HrpsysSeqRosBridge
+* remove webots from depends and add add_custom_command to download the sourcecode
+* reverted to r2951 for my mistake
+* check warning only for non-eistence movie or image
+* fixed index.rst and conf.py conflict problem
+* use baseTform instead of pose to obtain base link transformation from StateHolder
+* add JointTemperature data port ;; this data port does not work if Joint Temperature is input
+* update index.rst,conf.py by Jenkins
+* add manipulator for Yaskawa robot
+* fix: upport manipulator definition when export-collada, HRP4C is the example
+* support manipulator definition when export-collada, HRP4C is the example
+* make build/images for rostest
+* comment out torque reading printing by default
+* add data port for actual torques ;; rename original out data port for torque as mctorque ;; publish joint_states.effort based on rstorque
+* publish /fullbody_controller/state according to mcangle data port
+* rename compile_collada_robot->compile_collada_model
+* move compile_openhrp_model,compile_collada_robot to cmake/compile_robot_model.cmake
+* remove unused m_angle data port
+* increase max-time for gr001
+* fix typo hr001->gr001
+* increase time-limit
+* increse time-limit
+* increase time-limit
+* update samplerobot in house example to use grxui
+* fix video tag for rviz
+* fix for old cmake version issue #22
+* fix typo, errors
+* add to generate pr2.xml and pr2.conf
+* generate conf file from wrl for openhrp3 model
+* fix dependency
+* mv smartpal5.yaml yaskawasmartpal5.yaml
+* update CMakeLists.txt in order to run compile_robot sequentially, since this target use rostest and we could not run multiple rostest at the same time
+* fix xml
+* update launch script for eclipse-free hrpsys simulation
+* update make file to use _gen_project.launch to generate project file from model file
+* update documents
+* use copy for YasukawaSmartPal5
+* enable Camera of darwin.vcg avoid segfo in lucid
+* fix makefile for YasukawaSmartPal5
+* update launch documents
+* rtm-naming-restart now do not ru omniNaming in background, so that rosmake can easily kill rtm-naming
+* fix typo ;; openhrp -> openhrp3
+* use openhrp3_PACKAGE_PATH : try to call _stop_rtmnaming.launch at the end of the make test, to stop omniNames that confuses rosmake system
+* try to call _stop_rtmnaming.launch at the end of the make test, to stop omniNames that confuses rosmake system
+* revert to previous revision ;; ros name server must initialize before RTCsvn diff src/
+* fix order of member variables initialization
+* fix: rosbuild_download_data use download_checkmd5, wrong previous commit -> use download_checkmd5 instad of rosbuild_donwnload_data to try to download multiple times when fail
+* use download_checkmd5 instad of rosbuild_donwnload_data to try to download multiple times when fail
+* update test script
+* use video directive
+* add dependency on pr2eus because euslisp codes and msgs of pr2eus are used in examples
+* update launch script for new test-grxui.py
+* update time-limit
+* fix test setup for max-time
+* fix max-time for new jenkins machine
+* fix max-time
+* add off-pose
+* change reset-pose, in order not to collide with table
+* change service play pattern
+* remove waitforClockGenerator
+* update time-limit for gr001
+* update gr001.launch
+* update time-limit
+* update gr001 sample program
+* add gr001.launch to test
+* add GR001 model from choreonoid
+* set time-limit to 600
+* add pr2.launch to rostest
+* set ORBgiopMaxMsgSize to 2M to 20M
+* do not error when length of rsangle is larger then that of body->joints
+* remove retry option from test tag
+* fix dependency
+* fix dependency when downloading yaskawa model
+* path of robot-interface.l has changed
+* fix dependency
+* remove debug code
+* remove pr2 from test
+* add dirty patch
+* fix wait for ModelLoader code
+* fix check-tf
+* add debug message
+* add lfsensor and rfsensor
+* wait until ModelLoader is up
+* remove debug code
+* fix debug code
+* remove debug code
+* add pr2.launch for rostset
+* clean up code
+* fix camera position
+* fix path of webots robot directory ;; projects -> resources/projects
+* remove webots nodes if openhrp-node-name is not specified ;; does not export Receiver and Emitter to openhrp vrml
+* capitalize bottom, side, and top fields of cylinder
+* remove subdivision field from Cylinder Node in webots vrml because subdivision field does not exist in default VRML specification
+* add definition of Receiver PROTO and Emitter PROTO refering to reference.pdf in webots_simulator
+* fix path of darwin proto
+* rename webots -> webots_simulator because original directories or webots-ros-pkg are updated
+* use --nosim mode for pr2_startup
+* rename webots -> webots_simulator because original directories or webots-ros-pkg are updated
+* fix typo
+* add darwin-walk-data and update darwin sample ;; init -> walk -> pickup -> arm-up pose
+* remove unnecessary timestep argument ;; darwin simulation does not require this parameter by default at recent version
+* add angle-vector-for-seq-debug version instead of angle-vector-sequence version for hrp4c-walk debug
+* fix linear mode check ;; use :linear instead of linear
+* fix linear mode check ;; use :linear instead of linear
+* add raw service call for seq's waitInterpolation and setJointAngles
+* add hrp4c-walk in hrp4c-pickup sample script
+* setPreempted on Finalize
+* remove debug code
+* support angle-vector-sequence and wait-interpolation
+* lengthen max-time for hrp4c test
+* speed up darwin demo
+* add fullbody pickup sample for hrp4c robot ;; use hrp4c-fullbody-pickup by default
+* update hrp4c end-coords definitions
+* update darwin simulation
+* update for new visualization layout
+* add config for rviz
+* fix euslisp code for better visualization
+* update hrp4c.vcg
+* remove debug code
+* set timestep 0.005 for darwin
+* add pr2 simulation on openhrp3
+* add joint_state.velocity
+* update max-time
+* update documents for smartpal5.launch
+* add smartpal5.launch to rostest
+* support any size of input image
+* set max-time to 40 for dynamics simulated robot, 10 for no-sim robot
+* fix debug message
+* update darwin script
+* add arg OUTPUT
+* update launch files
+* add dependency to image_view2
+* fix euslisp model location
+* add smartpal5.yaml
+* add smartpal5 launch files
+* add to download yasukawa model
+* update webotsvrml2openhrp3vrml according to changing directory
+* move webotsvrml2openhrp3vrml from models to scrips
+* add scripts/webotsvrml2openhrp3vrml.l
+* move darwin.yaml from scripts to models
+* move model files from hrpsys to hrpsys_ros_bridge
+* add pa10, darwin, damplerobot launch example, rename file name based on description written in manifest.xml
+* add pa10, darwin, damplerobot launch example, rename file name based on description written in manifest.xml
+* wait until model loader is available
+* fix document
+* fix xml syntax
+* add hrp4c-nosim-pickup.launch and update hrp4c-pickup.l
+* remove hrp4c-example.launch
+* update launch description
+* fix max-time to 20
+* enable to specify service-name
+* update debug message
+* update hrp4c-\*.launch files
+* rename file name from test-hrp4c-\*.launch to hrp4c-\*.launch
+* fix xml syntax error
+* fix documnets
+* add test files
+* rename hrp4crobot-pickup -> hrp4c-pickup
+* remove test directory use rosdoc and launchfiles
+* add rtm-ros-robot-interface including ros::service-call and use it in roseus samples ;; rtm-ros-robot-interface will support idl<->srv conversion
+* use require instead of load for model loading
+* add sendmsg service to Hrpsysseqstaterosbridge using dynamic_reconfigure srv
+* move darwin's hrpsys.launch file to hrpsys_ros_bridge
+* fix hrp4c.test and CMakeList.txt
+* add darwin sample launch files and script
+* add test program for hrpsys_ros_bridge
+* add rostest hrp4c.test and generate-document.test
+* update hrpsys_ros_bridge.launch : remove SimulationEC from openrtm_args and rename rtmlaunch to hrplaunch_hrpsys_ros_bridge
+* revert previsou commit
+* update hrp4c.vcg
+* changed nodes in hrpsys_ros_bridge to not link SimulationEC, these nodes are not
+  real-time
+* current good connection script for hrp4r
+* add connection script for hrpsys_ros_bridge on real robot
+* unit of Update Intealval is [sec]
+* changed robot super class, from ros-interface to robot-interface
+* add --nosim launch file for hrp4c
+* add pickup demo for hrp4c
+* fix : forget to call spinOnce
+* use Update Interval 1 for Robot Model and TF
+* update darwin_ros_bridge.launch to use hrpsys_ros_bridge.launch
+* fix compile warning
+* fix wrong commit
+* clean up HrpsysSeqStateROSBridge
+* pusblish tf and others at the hrpsys cycle rate
+* add --sync
+* add SCHEDULER_ARGS argument support
+* fix to pass SCHEDULER_ARGS argument
+* fix debug message
+* clean up launch files, hrpsys/launch contains example for OpenHRP3.1 and hrpsys_ros_bridge/launch contains example for openhrp-scedular and ros bridge
+* move openhrp + ros integration example under hrpsys_ros_bridge
+* rename main_withHands to HiroNX
+* add hiro-nx example
+* add debug message to show @Initialize
+* change samplerobot_hrpsys_ros_bridge to use hrpsys.launch
+* add rviz, image_proc, image_view, camshiftdemo in samplerobot_ros_bridge.launch
+* remove openhrp3 from manifest, this is writtin in hrpsys/manifest.xml
+* fix ROBOT_NAME from HRP-4C to HRP4
+* fix samplerobot_ros_bridge.launch to include hrpsys_ros_bridge.launch
+* add debug message
+* update .launch files, .dae files goes to hrpsys/scripts, AbsTransformToPosRpy is launched from hrpsys.launch, update opertm_args to use SimulationEC
+* update skip paramater
+* link SimulationEC
+* add depend package rviz to manifest.xml
+* add hrpsys_ros_bridge
+* add launch/darwin_ros_bridge.launch
+* add ImageSensorROSBRidge to hrp4 simulation
+* add rviz configuration file for samplerobot
+* fix to avoid segfualt error when grxui does not publish data
+* add frame_id, and fill dummy camera_info param, publish effort and use wait-interpolation
+* publish sensor pose through tf::TransformBroadcaster
+* add ImageSensorROSBridge
+* add samplerobot_ros_bridge.launch
+* update HrpsysSeqStateROSBridge read pose and publish as tf
+* update use /odom as root frame
+* add rviz configuration files for pa10 and hrp4c
+* add pa10_ros_bridge.launch
+* update to HrpsysSeqStateROSBridge
+* update hrpsysStatePublihser, to work with robot_state_publisher
+* rename hrprtc -> hrpsys
+* rename hrprtc_ros_bridge -> hrpsys_ros_bridge
+* Contributors: Atsushi.tsuda@gmail.com, Isao Isaac Saito, Kei Okada, Ryohei Ueda, chen.jsk@gmail.com, garaemon, garaemon@gmail.com, gm130s@gmail.com, ik0313, ik0313@gmail.com, kei.okada, kei.okada@gmail.com, manabu1118, manabu1118@gmail.com, murooka@jsk.imi.i.u-tokyo.ac.jp, nakaokat@gmail.com, notheworld, notheworld@gmail.com, nozawa, rtmrosrobotics.testing@gmail.com, tnaka, yk.at.jsk.@gmail.com, yk.at.jsk@gmail.com, youhei, youhei@jsk.imi.i.u-tokyo.ac.jp
diff --git a/hrpsys_ros_bridge/CMakeLists.txt b/hrpsys_ros_bridge/CMakeLists.txt
index a8286d6..9e69257 100644
--- a/hrpsys_ros_bridge/CMakeLists.txt
+++ b/hrpsys_ros_bridge/CMakeLists.txt
@@ -8,6 +8,47 @@ rosbuild_find_ros_package(rtmbuild)
 include(${rtmbuild_PACKAGE_PATH}/cmake/rtmbuild.cmake)
 include(${PROJECT_SOURCE_DIR}/cmake/compile_robot_model.cmake)
 
+# if groovy and not found pr2_controllers_msgs
+rosbuild_find_ros_package(pr2_controllers_msgs)
+if(NOT EXISTS "${pr2_controllers_msgs_PACKAGE_PATH}")
+  if(NOT EXISTS "${PROJECT_SOURCE_DIR}/../pr2_controllers_msgs")
+    execute_process(COMMAND cmake -E remove_directory /tmp/pr2_controllers)
+    execute_process(
+      COMMAND git clone --depth 1 -b groovy-devel https://github.com/PR2/pr2_controllers.git /tmp/pr2_controllers
+      OUTPUT_VARIABLE _download_output
+      RESULT_VARIABLE _download_failed)
+    execute_process(
+      COMMAND cmake -E copy_directory  /tmp/pr2_controllers/pr2_controllers_msgs ${PROJECT_SOURCE_DIR}/../pr2_controllers_msgs)
+    message("download pr2_controllers_msgs files ${_download_output}")
+    if (_download_failed)
+      message(FATAL_ERROR "Download pr2_controllers_msgs failed : ${_download_failed}")
+    endif(_download_failed)
+    # rospack profile
+    execute_process(COMMAND rospack profile OUTPUT_VARIABLE _profile_output RESULT_VARIABLE _profile_failed)
+    message("rospack profile ${_profile_output}")
+    if (_compile_failed)
+      message(FATAL_ERROR "rospack profile failed : ${_profile_failed}")
+    endif(_compile_failed)
+    # rosmake pr2_controllers_msgs
+    execute_process(COMMAND rosmake pr2_controllers_msgs OUTPUT_VARIABLE _compile_output RESULT_VARIABLE _compile_failed)
+    message("compile pr2_controllers_msgs ${_compile_output}")
+    if (_compile_failed)
+      message(FATAL_ERROR "compile pr2_controllers_msgs failed : ${_compile_failed}")
+    endif(_compile_failed)
+  endif()
+endif()
+
+## <depend package="pr2_controllers_msgs"/> in manifest.xml is initially commented out
+## since rosmake -a seems to check manifest.xml and if some of depend is not found, 
+## it does not create dependency graph. To avoid this, we commented out.
+## However when make hrpsys_ros_bridge component, it uses pr2_controller_msgs,
+## so we need to comment in, in compilation time.
+message("sed -i s@'<!--\\s*\\(.*pr2_controllers.*/\\)\\s*-->'@'<\\1>'@g ${PROJECT_SOURCE_DIR}/manifest.xml")
+execute_process(
+  COMMAND sh -c "sed -i s@'<!--\\s*\\(.*pr2_controllers.*/\\)\\s*-->'@'<\\1>'@g ${PROJECT_SOURCE_DIR}/manifest.xml"
+  )
+
+
 # Set the build type.  Options are:
 #  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
 #  Debug          : w/ debug symbols, w/o optimization
@@ -55,8 +96,68 @@ rtmbuild_add_executable(ImageSensorROSBridge src/ImageSensorROSBridge.cpp src/Im
 rtmbuild_add_executable(HrpsysJointTrajectoryBridge src/HrpsysJointTrajectoryBridge.cpp src/HrpsysJointTrajectoryBridgeComp.cpp)
 
 ##
-## test
+## test (Copy from catkin.cmake)
 ##
+rosbuild_find_ros_package(openhrp3)
+set(ENV{PKG_CONFIG_DIR} ${oepnhrp3_PACKAGE_PATH}/lib/pkgconfig:$ENV{PKG_CONFIG_DIR})
+execute_process(COMMAND pkg-config openhrp3.1 --variable=idl_dir
+  OUTPUT_VARIABLE _OPENHRP3_IDL_DIR
+  RESULT_VARIABLE _OPENHRP3_RESULT
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+set(_OPENHRP3_MODEL_DIR ${_OPENHRP3_IDL_DIR}/../sample/model)
+if(NOT _OPENHRP3_RESULT EQUAL 0)
+  message(FATAL_ERROR "Fail to run pkg-config ${_OPENHRP3_RESULT}")
+endif()
+if(NOT EXISTS ${_OPENHRP3_IDL_DIR})
+  message(FATAL_ERROR "Path ${_OPENHRP3_IDL_DIR} is not exists")
+endif()
+if(NOT EXISTS ${_OPENHRP3_MODEL_DIR})
+  message(FATAL_ERROR "Path ${_OPENHRP3_MODEL_DIR} is not exists")
+endif()
 
+compile_openhrp_model(${_OPENHRP3_MODEL_DIR}/PA10/pa10.main.wrl)
+compile_openhrp_model(${_OPENHRP3_MODEL_DIR}/sample1.wrl SampleRobot)
+generate_default_launch_eusinterface_files(${_OPENHRP3_MODEL_DIR}/PA10/pa10.main.wrl hrpsys_ros_bridge)
+generate_default_launch_eusinterface_files(${_OPENHRP3_MODEL_DIR}/sample1.wrl hrpsys_ros_bridge SampleRobot)
+execute_process(COMMAND sed -i s@pa10\(Robot\)0@HRP1\(Robot\)0@ ${PROJECT_SOURCE_DIR}/launch/pa10.launch)
+execute_process(COMMAND sed -i s@pa10\(Robot\)0@HRP1\(Robot\)0@ ${PROJECT_SOURCE_DIR}/launch/pa10_startup.launch)
+execute_process(COMMAND sed -i s@pa10\(Robot\)0@HRP1\(Robot\)0@ ${PROJECT_SOURCE_DIR}/launch/pa10_ros_bridge.launch)
+file(WRITE models/SampleRobot_controller_config.yaml
+"controller_configuration:
+  - group_name: rarm
+    controller_name: /rarm_controller
+    joint_list:
+      - RARM_SHOULDER_P
+      - RARM_SHOULDER_R
+      - RARM_SHOULDER_Y
+      - RARM_ELBOW
+      - RARM_WRIST_Y
+      - RARM_WRIST_P
+  - group_name: larm
+    controller_name: /larm_controller
+    joint_list:
+      - LARM_SHOULDER_P
+      - LARM_SHOULDER_R
+      - LARM_SHOULDER_Y
+      - LARM_ELBOW
+      - LARM_WRIST_Y
+      - LARM_WRIST_P
+  - group_name: torso
+    controller_name: /torso_controller
+    joint_list:
+      - WAIST_P
+      - WAIST_R
+      - CHEST
+  - group_name: rhand
+    controller_name: /rhand_controller
+    joint_list:
+      - RARM_WRIST_R
+  - group_name: lhand
+    controller_name: /lhand_controller
+    joint_list:
+      - LARM_WRIST_R
+")
 
 
+rosbuild_add_rostest(test/test-samplerobot.test)
+rosbuild_add_rostest(test/test-pa10.test)
diff --git a/hrpsys_ros_bridge/catkin.cmake b/hrpsys_ros_bridge/catkin.cmake
index 547a873..16bd345 100644
--- a/hrpsys_ros_bridge/catkin.cmake
+++ b/hrpsys_ros_bridge/catkin.cmake
@@ -2,9 +2,31 @@
 cmake_minimum_required(VERSION 2.8.3)
 project(hrpsys_ros_bridge)
 
-# call catkin depends
-find_package(catkin REQUIRED COMPONENTS rtmbuild roscpp sensor_msgs robot_state_publisher actionlib control_msgs tf camera_info_manager image_transport dynamic_reconfigure ) # pr2_controllers_msgs robot_monitor
+find_package(pr2_controllers_msgs QUIET)
+if(NOT pr2_controllers_msgs_FOUND)
+  execute_process(COMMAND cmake -E remove_directory /tmp/pr2_controllers)
+  execute_process(
+    COMMAND git clone --depth 1 -b hydro-devel https://github.com/PR2/pr2_controllers.git /tmp/pr2_controllers
+    OUTPUT_VARIABLE _download_output
+    RESULT_VARIABLE _download_failed)
+  execute_process(
+    COMMAND cmake -E copy_directory  /tmp/pr2_controllers/pr2_controllers_msgs ${PROJECT_SOURCE_DIR}/../pr2_controllers_msgs)
+  message("download pr2_controllers_msgs files ${_download_output}")
+  if (_download_failed)
+    message(FATAL_ERROR "Download pr2_controllers_msgs failed : ${_download_failed}")
+  endif(_download_failed)
+  # catkin_make
+  # rosmake pr2_controllers_msgs
+  execute_process(COMMAND cmake -E chdir ${CMAKE_SOURCE_DIR}/../ catkin_make --build /tmp/pr2_controllers --source ${PROJECT_SOURCE_DIR}/../pr2_controllers_msgs --pkg pr2_controllers_msgs OUTPUT_VARIABLE _compile_output RESULT_VARIABLE _compile_failed)
+  message("compile pr2_controllers_msgs ${_compile_output}")
+  if (_compile_failed)
+    message(FATAL_ERROR "compile pr2_controllers_msgs failed : ${_compile_failed}")
+  endif(_compile_failed)
+endif()
 
+# call catkin depends
+find_package(catkin REQUIRED COMPONENTS rtmbuild roscpp sensor_msgs robot_state_publisher actionlib control_msgs tf camera_info_manager image_transport dynamic_reconfigure hrpsys) # pr2_controllers_msgs robot_monitor
+catkin_python_setup()
 # include rtmbuild
 #include(${rtmbuild_PREFIX}/share/rtmbuild/cmake/rtmbuild.cmake)
 if(EXISTS ${rtmbuild_SOURCE_DIR}/cmake/rtmbuild.cmake)
@@ -22,12 +44,19 @@ include(${PROJECT_SOURCE_DIR}/cmake/compile_robot_model.cmake)
 
 # copy idl files from hrpsys
 file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/idl)
-find_package(PkgConfig)
-pkg_check_modules(hrpsys hrpsys-base REQUIRED)
-set(hrpsys_IDL_DIR ${hrpsys_PREFIX}/share/hrpsys/share/hrpsys/idl/)
+set(ENV{PKG_CONFIG_PATH} ${hrpsys_PREFIX}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}) #update PKG_CONFIG_PATH for pkg-config
+execute_process(COMMAND pkg-config --variable=idldir hrpsys-base
+  OUTPUT_VARIABLE hrpsys_IDL_DIR
+  RESULT_VARIABLE RESULT
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+if(NOT RESULT EQUAL 0)
+  execute_process(COMMAND "pkg-config" "--list-all")
+  execute_process(COMMAND "env")
+  message(FATAL_ERROR "Fail to run pkg-config ${RESULT}")
+endif()
 if(EXISTS ${hrpsys_IDL_DIR})
   file(COPY
-    ${hrpsys_IDL_DIR}
+    ${hrpsys_IDL_DIR}/
     DESTINATION ${PROJECT_SOURCE_DIR}/idl)
 else()
   get_cmake_property(_variableNames VARIABLES)
@@ -48,7 +77,7 @@ rtmbuild_init()
 # call catkin_package, after rtmbuild_init, before rtmbuild_gen*
 catkin_package(
     DEPENDS hrpsys # TODO
-    CATKIN-DEPENDS rtmbuild roscpp sensor_msgs robot_state_publisher actionlib control_msgs tf camera_info_manager image_transport dynamic_reconfigure # pr2_controllers_msgs robot_monitor
+    CATKIN_DEPENDS rtmbuild roscpp sensor_msgs robot_state_publisher actionlib control_msgs tf camera_info_manager image_transport dynamic_reconfigure # pr2_controllers_msgs robot_monitor
     INCLUDE_DIRS # TODO include
     LIBRARIES # TODO
     CFG_EXTRAS compile_robot_model.cmake
@@ -68,56 +97,10 @@ string(RANDOM _random_string)
 
 # Check ROS distro. since pr2_controller_msgs of groovy is not catkinized
 if($ENV{ROS_ROOT} MATCHES "/opt/ros/groovy/share/ros")
-
-message("sed -i s@'<\\(.*_depend\\)>pr2_controllers</\\(.*_depend\\)>'@'<!-- \\1>pr2_controllers</\\2 -->'@g ${PROJECT_SOURCE_DIR}/package.xml")
-execute_process(
+  message("sed -i s@'<\\(.*_depend\\)>pr2_controllers</\\(.*_depend\\)>'@'<!-- \\1>pr2_controllers</\\2 -->'@g ${PROJECT_SOURCE_DIR}/package.xml")
+  execute_process(
   COMMAND sh -c "sed -i s@'<\\(.*_depend\\)>pr2_controllers</\\(.*_depend\\)>'@'<!-- \\1>pr2_controllers</\\2 -->'@g ${PROJECT_SOURCE_DIR}/package.xml"
   )
-
-execute_process(
-  COMMAND svn co --non-interactive --trust-server-cert https://code.ros.org/svn/wg-ros-pkg/stacks/pr2_controllers/tags/groovy/pr2_controllers_msgs /tmp/${_random_string}/pr2_controllers_msgs
-  OUTPUT_VARIABLE _download_output
-  RESULT_VARIABLE _download_failed)
-message("download pr2_controllers_msgs files ${_download_output}")
-if (_download_failed)
-  message(FATAL_ERROR "Download pr2_controllers_msgs failed : ${_download_failed}")
-endif(_download_failed)
-file(WRITE /tmp/${_random_string}/rospack
-"\#!/bin/sh
-echo $@ 1>&2
-if [ \"$1\"  = \"deps-manifests\" ];then
-   echo \"/opt/ros/groovy/share/genmsg/package.xml /opt/ros/groovy/share/gencpp/package.xml /opt/ros/groovy/share/genlisp/package.xml /opt/ros/groovy/share/genpy/package.xml /opt/ros/groovy/share/message_generation/package.xml /opt/ros/groovy/share/cpp_common/package.xml /opt/ros/groovy/share/rostime/package.xml /opt/ros/groovy/share/roscpp_traits/package.xml /opt/ros/groovy/share/roscpp_serialization/package.xml /opt/ros/groovy/share/message_runtime/package.xml /opt/ros/groovy/share/std_msgs/package.xml /opt/ros/groovy/share/actionlib_msgs/package.xml /opt/ros/groovy/share/trajectory_msgs/package.xml /opt/ros/groovy/share/geometry_msgs/package.xml\"
-elif [ \"$1\"  = \"deps-msgsrv\" ];then
-   true
-elif [ \"$1\"  = \"cflags-only-I\" ];then
-   echo \"/tmp/${_random_string}/pr2_controllers_msgs/msg_gen/cpp/include /tmp/${_random_string}/pr2_controllers_msgs/srv_gen/cpp/include /opt/ros/groovy/include\"
-elif [ \"$1\"  = \"cflags-only-other\" ];then
-   true
-elif [ \"$1\"  = \"libs-only-L\" ];then
-   echo \"/opt/ros/groovy/lib\"
-elif [ \"$1\"  = \"libs-only-l\" ];then
-   echo \"roscpp_serialization rostime :/usr/lib/libboost_date_time-mt.so :/usr/lib/libboost_system-mt.so :/usr/lib/libboost_thread-mt.so pthread cpp_common\"
-elif [ \"$1\"  = \"libs-only-other\" ];then
-   true
-elif [ \"$1\"  = \"langs\" ];then
-   true
-else
-   /opt/ros/groovy/bin/rospack $@
-fi
-")
-execute_process(
-  COMMAND sh -c "chmod u+x /tmp/${_random_string}/rospack"
-  COMMAND sh -c "touch /tmp/${_random_string}/rosdep; chmod u+x /tmp/${_random_string}/rosdep"
-  COMMAND sh -c "PATH=/tmp/${_random_string}:$PATH ROS_PACKAGE_PATH=/tmp/${_random_string}/pr2_controllers_msgs:$ROS_PACKAGE_PATH make -C /tmp/${_random_string}/pr2_controllers_msgs"
-  OUTPUT_VARIABLE _compile_output
-  RESULT_VARIABLE _compile_failed)
-message("Compile pr2_controllers_msgs files ${_compile_output}")
-if (_compile_failed)
-  message(FATAL_ERROR "Compile pr2_controllers_msgs failed : ${_compile_failed}")
-endif(_compile_failed)
-
-include_directories(/tmp/${_random_string}/pr2_controllers_msgs/msg_gen/cpp/include)
-
 endif($ENV{ROS_ROOT} MATCHES "/opt/ros/groovy/share/ros")
 
 rtmbuild_add_executable(HrpsysSeqStateROSBridge src/HrpsysSeqStateROSBridgeImpl.cpp src/HrpsysSeqStateROSBridge.cpp src/HrpsysSeqStateROSBridgeComp.cpp)
@@ -126,29 +109,92 @@ rtmbuild_add_executable(HrpsysJointTrajectoryBridge src/HrpsysJointTrajectoryBri
 
 install(PROGRAMS scripts/rtmlaunch scripts/rtmtest scripts/rtmstart.py
   DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION})
-install(DIRECTORY launch
-  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-  PATTERN ".svn" EXCLUDE)
-install(DIRECTORY euslisp
+install(DIRECTORY launch euslisp srv idl scripts models test cmake
   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-  PATTERN ".svn" EXCLUDE)
-install(DIRECTORY scripts
-  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-  USE_SOURCE_PERMISSIONS
-  PATTERN ".svn" EXCLUDE
-#  PATTERN "rtmlaunch" EXCLUDE   copy rtmlaunch to both share and bin for backword compatibility
-#  PATTERN "rtmtest" EXCLUDE
-#  PATTERN "rtmstart.py" EXCLUDE
-  )
-
-install(DIRECTORY cmake
-  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
-  PATTERN ".svn" EXCLUDE
-  )
-
-  
+  USE_SOURCE_PERMISSIONS)
+
+## fix generated path for model file
+install(CODE
+  "execute_process(COMMAND echo \"fix \$ENV{DISTDIR}/${CMAKE_INSTALL_PREFIX}/${CATKIN_PACKAGE_SHARE_DESTINATION}/models/*.*\")
+   execute_process(COMMAND echo \"                   ${PROJECT_SOURCE_DIR} -> ${CMAKE_INSTALL_PREFIX}\")
+   if (EXISTS ${openhrp3_SOURCE_DIR})
+     execute_process(COMMAND echo \"                  ${openhrp3_SOURCE_DIR} -> ${openhrp3_PREFIX}/share/openhrp3\")
+   endif()
+   execute_process(COMMAND echo \"                  ${CATKIN_DEVEL_PREFIX} -> ${CMAKE_INSTALL_PREFIX}\")
+   file(GLOB _conf_files \"\$ENV{DISTDIR}/${CMAKE_INSTALL_PREFIX}/${CATKIN_PACKAGE_SHARE_DESTINATION}/models/*.*\")
+   foreach(_conf_file \${_conf_files})
+     execute_process(COMMAND echo \"fix \${_conf_file}\")
+     if (EXISTS ${openhrp3_SOURCE_DIR})
+       execute_process(COMMAND sed -i s@${openhrp3_SOURCE_DIR}/share/OpenHRP-3.1@${CMAKE_INSTALL_PREFIX}/share/openhrp3/share/OpenHRP-3.1@g \${_conf_file})
+     endif()
+     execute_process(COMMAND sed -i s@${CATKIN_DEVEL_PREFIX}@${CMAKE_INSTALL_PREFIX}@g \${_conf_file})
+   endforeach()
+  ")
+
+## temprarily fix (FIXME)
+install(CODE "execute_process(COMMAND cmake -E touch \$ENV{DISTDIR}/${CMAKE_INSTALL_PREFIX}/${CATKIN_PACKAGE_PYTHON_DESTINATION}/__init__.py)")
 
 ##
-## test
+## test (Copy from CMakeLists.txt)
 ##
 
+execute_process(COMMAND pkg-config openhrp3.1 --variable=idl_dir
+  OUTPUT_VARIABLE _OPENHRP3_IDL_DIR
+  RESULT_VARIABLE _OPENHRP3_RESULT
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+set(_OPENHRP3_MODEL_DIR ${_OPENHRP3_IDL_DIR}/../sample/model)
+if(NOT _OPENHRP3_RESULT EQUAL 0)
+  message(FATAL_ERROR "Fail to run pkg-config ${_OPENHRP3_RESULT}")
+endif()
+if(NOT EXISTS ${_OPENHRP3_IDL_DIR})
+  message(FATAL_ERROR "Path ${_OPENHRP3_IDL_DIR} is not exists")
+endif()
+if(NOT EXISTS ${_OPENHRP3_MODEL_DIR})
+  message(FATAL_ERROR "Path ${_OPENHRP3_MODEL_DIR} is not exists")
+endif()
+
+compile_openhrp_model(${_OPENHRP3_MODEL_DIR}/PA10/pa10.main.wrl)
+compile_openhrp_model(${_OPENHRP3_MODEL_DIR}/sample1.wrl SampleRobot)
+generate_default_launch_eusinterface_files("\$(find openhrp3)/share/OpenHRP-3.1/sample/model/PA10/pa10.main.wrl" hrpsys_ros_bridge)
+generate_default_launch_eusinterface_files("\$(find openhrp3)/share/OpenHRP-3.1/sample/model/sample1.wrl" hrpsys_ros_bridge SampleRobot)
+execute_process(COMMAND sed -i s@pa10\(Robot\)0@HRP1\(Robot\)0@ ${PROJECT_SOURCE_DIR}/launch/pa10.launch)
+execute_process(COMMAND sed -i s@pa10\(Robot\)0@HRP1\(Robot\)0@ ${PROJECT_SOURCE_DIR}/launch/pa10_startup.launch)
+execute_process(COMMAND sed -i s@pa10\(Robot\)0@HRP1\(Robot\)0@ ${PROJECT_SOURCE_DIR}/launch/pa10_ros_bridge.launch)
+file(WRITE models/SampleRobot_controller_config.yaml
+"controller_configuration:
+  - group_name: rarm
+    controller_name: /rarm_controller
+    joint_list:
+      - RARM_SHOULDER_P
+      - RARM_SHOULDER_R
+      - RARM_SHOULDER_Y
+      - RARM_ELBOW
+      - RARM_WRIST_Y
+      - RARM_WRIST_P
+  - group_name: larm
+    controller_name: /larm_controller
+    joint_list:
+      - LARM_SHOULDER_P
+      - LARM_SHOULDER_R
+      - LARM_SHOULDER_Y
+      - LARM_ELBOW
+      - LARM_WRIST_Y
+      - LARM_WRIST_P
+  - group_name: torso
+    controller_name: /torso_controller
+    joint_list:
+      - WAIST_P
+      - WAIST_R
+      - CHEST
+  - group_name: rhand
+    controller_name: /rhand_controller
+    joint_list:
+      - RARM_WRIST_R
+  - group_name: lhand
+    controller_name: /lhand_controller
+    joint_list:
+      - LARM_WRIST_R
+")
+
+add_rostest(test/test-samplerobot.test)
+add_rostest(test/test-pa10.test)
diff --git a/hrpsys_ros_bridge/cmake/compile_robot_model.cmake b/hrpsys_ros_bridge/cmake/compile_robot_model.cmake
index a8ababa..a27cf39 100644
--- a/hrpsys_ros_bridge/cmake/compile_robot_model.cmake
+++ b/hrpsys_ros_bridge/cmake/compile_robot_model.cmake
@@ -29,25 +29,27 @@ macro(get_option_from_args _option_ret _option_name _separator _quater _ret_add_
     if ("${anarg}" STREQUAL "${_option_name}")
       if (NOT "${_tmp_option}" STREQUAL "")
         list(GET _arg_list 1 _tmp_option2)
+	string(REPLACE " " "\\\\ " _tmp_option2 ${_tmp_option2})
         set(_tmp_option "${_tmp_option}\ ${_separator}${_tmp_option2}")
       else(NOT "${_tmp_option}" STREQUAL "")
         list(GET _arg_list 1 _tmp_option2)
+	string(REPLACE " " "\\\\ " _tmp_option2 ${_tmp_option2})
         set(_tmp_option "${_separator}${_tmp_option2}")
       endif (NOT "${_tmp_option}" STREQUAL "")
     endif ("${anarg}" STREQUAL "${_option_name}")
     list(REMOVE_AT _arg_list 0)
   endforeach(anarg ${_arg_list2})
   if (NOT "${_tmp_option}" STREQUAL "" AND NOT "${_ret_add_str}" STREQUAL "")
-    set(_tmp_option "${_ret_add_str}\"${_tmp_option}\"")
+    set(_tmp_option "${_ret_add_str}\\\"${_tmp_option}\\\"")
   endif (NOT "${_tmp_option}" STREQUAL "" AND NOT "${_ret_add_str}" STREQUAL "")
   set(${_option_ret} "${_tmp_option}")
 endmacro(get_option_from_args _option_ret _option_name)
 
 macro(get_conf_file_option _conf_file_option_ret _robothardware_conf_file_option_ret _conf_dt_option_ret _simulation_timestep_option_ret)
   get_option_from_args(${_conf_file_option_ret} "--conf-file-option" "--conf-file-option\ " ' "CONF_FILE_OPTION:=" ${ARGV})
-  get_option_from_args(${_robothardware_conf_file_option_ret} "--robothardware-conf-file-option" "\ --robothardware-conf-file-option\ " ' "ROBOTHARDWARE_CONF_FILE_OPTION:=" ${ARGV})
-  get_option_from_args(${_conf_dt_option_ret} "--conf-dt-option" "\ --dt\ " ' "CONF_DT_OPTION:=" ${ARGV})
-  get_option_from_args(${_simulation_timestep_option_ret} "--simulation-timestep-option" "\ --timestep\ " ' "SIMULATION_TIMESTEP_OPTION:=" ${ARGV})
+  get_option_from_args(${_robothardware_conf_file_option_ret} "--robothardware-conf-file-option" "--robothardware-conf-file-option\ " ' "ROBOTHARDWARE_CONF_FILE_OPTION:=" ${ARGV})
+  get_option_from_args(${_conf_dt_option_ret} "--conf-dt-option" "--dt\ " ' "CONF_DT_OPTION:=" ${ARGV})
+  get_option_from_args(${_simulation_timestep_option_ret} "--simulation-timestep-option" "--timestep\ " ' "SIMULATION_TIMESTEP_OPTION:=" ${ARGV})
 endmacro()
 
 macro(get_proj_file_root_option _proj_file_root_option_ret)
@@ -87,6 +89,9 @@ macro(compile_openhrp_model wrlfile)
   # rtm-naming
   if(${USE_ROSBUILD})
     rosbuild_find_ros_package(openrtm_aist)
+    set(ENV{PKG_CONFIG_PATH} ${openrtm_aist_PACKAGE_PATH}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH})
+  endif()
+  if (EXISTS ${openrtm_aist_PACKAGE_PATH}/bin/rtm-naming)
     set(_rtm_naming_exe ${openrtm_aist_PACKAGE_PATH}/bin/rtm-naming)
   else()
     find_package(PkgConfig)
@@ -112,35 +117,50 @@ macro(compile_openhrp_model wrlfile)
   else()
     #
     set(_euscollada_dep_files ${_collada2eus_exe} ${euscollada_PACKAGE_PATH}/src/euscollada-robot.l)
+    if(${USE_ROSBUILD})
+      set(_collada2eus_option "")
+    else()
+      set(_collada2eus_option ROS_PACKAGE_PATH=${euscollada_PACKAGE_PATH}/..:$ENV{ROS_PACKAGE_PATH})
+    endif()
     if(EXISTS ${_yamlfile})
       add_custom_command(OUTPUT ${_lispfile}
-        COMMAND ${_collada2eus_exe} ${_daefile} ${_yamlfile} ${_lispfile}
+        COMMAND ${_collada2eus_option} ${_collada2eus_exe} ${_daefile} ${_yamlfile} ${_lispfile}
         DEPENDS ${_daefile} ${_yamlfile} ${_euscollada_dep_files})
     else(EXISTS ${_yamlfile})
       add_custom_command(OUTPUT ${_lispfile}
-        COMMAND ${_collada2eus_exe} ${_daefile} ${_lispfile}
+        COMMAND ${_collada2eus_option} ${_collada2eus_exe} ${_daefile} ${_lispfile}
         DEPENDS ${_daefile} ${_euscollada_dep_files})
     endif(EXISTS ${_yamlfile})
   endif()
   # use export-collada
   if(${USE_ROSBUILD})
     rosbuild_find_ros_package(openhrp3)
+    set(ENV{PKG_CONFIG_PATH} ${openhrp3_PACKAGE_PATH}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH})
+  endif()
+  if (EXISTS ${openhrp3_PACKAGE_PATH}/bin/export-collada)
     set(_export_collada_exe ${openhrp3_PACKAGE_PATH}/bin/export-collada)
   else()
+    find_package(openhrp3)
     set(openhrp3_PACKAGE_PATH ${openhrp3_SOURCE_DIR})
-    set(_export_collada_exe ${CATKIN_DEVEL_PREFIX}/lib/openhrp3/export-collada)
+    set(_export_collada_exe ${openhrp3_PREFIX}/lib/openhrp3/export-collada)
   endif()
   if(EXISTS ${_export_collada_exe})
     message("using export-collada to convert models ${_export_collada_exe}")
   else()
     # when openhrp3 is catkin installed
+    message(FATAL_ERROR "assuming export-collada(${_export_collada_exe}) is already compiled")
     set(_export_collada_exe )
-    message("assuming export-collada is already compiled")
   endif()
   if(EXISTS ${_export_collada_exe})
-    add_custom_command(OUTPUT ${_daefile}
-      COMMAND ${_export_collada_exe} -i ${wrlfile} -o ${_daefile} ${_export_collada_option}
-      DEPENDS ${wrlfile} ${_export_collada_exe})
+    if(${USE_ROSBUILD})
+      add_custom_command(OUTPUT ${_daefile}
+        COMMAND ${_export_collada_exe} -i ${wrlfile} -o ${_daefile} ${_export_collada_option}
+        DEPENDS ${wrlfile} ${_export_collada_exe})
+    else()                      #when catkin, appending LD_LIBRARY_PATH
+      add_custom_command(OUTPUT ${_daefile}
+        COMMAND LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}:${CATKIN_DEVEL_PREFIX}/lib ${_export_collada_exe} -i ${wrlfile} -o ${_daefile} ${_export_collada_option}
+        DEPENDS ${wrlfile} ${_export_collada_exe})
+    endif()
   endif()
   # use _gen_project.launch
   if(${USE_ROSBUILD})
@@ -148,10 +168,15 @@ macro(compile_openhrp_model wrlfile)
     rosbuild_find_ros_package(hrpsys_tools)
   else()
     find_package(hrpsys_tools)
+    if(EXISTS ${openhrp3_SOURCE_DIR})
+      set(openhrp3_PACKAGE_PATH ${openhrp3_SOURCE_DIR})
+    else()
+      set(openhrp3_PACKAGE_PATH ${openhrp3_PREFIX}/share/openhrp3)
+    endif()
     if(EXISTS ${hrpsys_SOURCE_DIR})
       set(hrpsys_PACKAGE_PATH ${hrpsys_SOURCE_DIR})
     else()
-      set(hrpsys_PACKAGE_PATH ${hrpsys_PREFIX}/lib/hrpsys)
+      set(hrpsys_PACKAGE_PATH ${hrpsys_PREFIX}/share/hrpsys)
     endif()
     if(EXISTS ${hrpsys_tools_SOURCE_DIR})
       set(hrpsys_tools_PACKAGE_PATH ${hrpsys_tools_SOURCE_DIR})
@@ -161,27 +186,44 @@ macro(compile_openhrp_model wrlfile)
   endif()
   if(EXISTS ${hrpsys_PACKAGE_PATH}/bin/ProjectGenerator)
     set(_gen_project_dep_files ${hrpsys_PACKAGE_PATH}/bin/ProjectGenerator ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch)
+  elseif(EXISTS ${hrpsys_PREFIX}/lib/hrpsys/ProjectGenerator)
+    set(_gen_project_dep_files ${hrpsys_PREFIX}/lib/hrpsys/ProjectGenerator ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch)
   else()
     # when hrpsys is catkin installed
     set(_gen_project_dep_files)
     message("assuming hrpsys/ProjectGenerator is already compiled")
   endif()
+  # this command should depends on the LATEST compile_robots, in order to prevent
+  # parallel execution of rostest
+  if (compile_robots)
+    list(LENGTH compile_robots _compile_robot_length)
+    math(EXPR _compile_robot_latest_index "${_compile_robot_length} - 1")
+    list(GET compile_robots ${_compile_robot_latest_index} _latest_robot)
+  endif(compile_robots)
+  message("compile_openhrp3_model ${wrlfile}")
+  message("  hrpsys_tools_PACKAGE_PATH = ${hrpsys_tools_PACKAGE_PATH}")
+  message("  hrpsys_PACKAGE_PATH       = ${hrpsys_PACKAGE_PATH}")
+  message("  openhrp3_PACKAGE_PATH     = ${openhrp3_PACKAGE_PATH}")
+  set(_CMAKE_PREFIX_PATH "")
+  foreach(_PATH ${CMAKE_PREFIX_PATH})
+    set(_CMAKE_PREFIX_PATH "${_CMAKE_PREFIX_PATH}:${_PATH}")
+  endforeach()
   add_custom_command(OUTPUT ${_xmlfile}
     COMMAND ${_rtm_naming_exe} ${_corba_port}
-    COMMAND echo 'ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${wrlfile} OUTPUT:=${_xmlfile} ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}' > /tmp/_gen_project_${_name}_xml.sh
-    COMMAND sh /tmp/_gen_project_${_name}_xml.sh
+    COMMAND sh -c "CMAKE_PREFIX_PATH=${_CMAKE_PREFIX_PATH} ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${wrlfile} OUTPUT:=${_xmlfile} ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}"
     COMMAND pkill -KILL -f "omniNames -start ${_corba_port}" || echo "no process to kill"
-    DEPENDS ${daefile} ${_gen_project_dep_files})
+    DEPENDS ${daefile} ${_gen_project_dep_files} ${_latest_robot})
   add_custom_command(OUTPUT ${_xmlfile_nosim}
     COMMAND ${_rtm_naming_exe} ${_corba_port}
-    COMMAND echo 'ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${wrlfile} OUTPUT:=${_xmlfile_nosim} INTEGRATE:=false ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}' > /tmp/_gen_project_${_name}_xml_nosim.sh
-    COMMAND sh /tmp/_gen_project_${_name}_xml_nosim.sh
+    COMMAND sh -c "CMAKE_PREFIX_PATH=${_CMAKE_PREFIX_PATH} ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${wrlfile} OUTPUT:=${_xmlfile_nosim} INTEGRATE:=false ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}"
     COMMAND pkill -KILL -f "omniNames -start ${_corba_port}" || echo "no process to kill"
     DEPENDS ${daefile} ${_gen_project_dep_files} ${_xmlfile})
-  if(EXISTS ${_collada2eus_exe})
+  if(EXISTS ${_collada2eus_exe} AND EXISTS ${_export_collada_exe})
     add_custom_target(${_sname}_compile DEPENDS ${_lispfile} ${_xmlfile} ${_xmlfile_nosim} ${_daefile})
-  else()
+  elseif(EXISTS ${_export_collada_exe})
     add_custom_target(${_sname}_compile DEPENDS ${_xmlfile} ${_xmlfile_nosim} ${_daefile})
+  else()
+    add_custom_target(${_sname}_compile DEPENDS ${_xmlfile} ${_xmlfile_nosim})
   endif()
   ## make sure to kill nameserver
   add_custom_command(OUTPUT ${_sname}_compile_cleanup
@@ -195,7 +237,6 @@ macro(compile_openhrp_model wrlfile)
   get_directory_property(_current_directory_properties ADDITIONAL_MAKE_CLEAN_FILES)
   set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES
     "${_workdir}/${_name}.conf;${_workdir}/${_name}.RobotHardware.conf;${_workdir}/${_name}_nosim.conf;${_workdir}/${_name}_nosim.RobotHardware.conf;${_current_directory_properties}")
-
   list(APPEND compile_robots ${_sname}_compile)
 endmacro(compile_openhrp_model)
 
@@ -227,6 +268,9 @@ macro(compile_collada_model daefile)
   # rtm-naming
   if(${USE_ROSBUILD})
     rosbuild_find_ros_package(openrtm_aist)
+    set(ENV{PKG_CONFIG_PATH} ${openrtm_aist_PACKAGE_PATH}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH})
+  endif()
+  if (EXISTS ${openrtm_aist_PACKAGE_PATH}/bin/rtm-naming)
     set(_rtm_naming_exe ${openrtm_aist_PACKAGE_PATH}/bin/rtm-naming)
   else()
     find_package(PkgConfig)
@@ -268,10 +312,15 @@ macro(compile_collada_model daefile)
   else()
     find_package(hrpsys)
     find_package(hrpsys_tools)
+    if(EXISTS ${openhrp3_SOURCE_DIR})
+      set(openhrp3_PACKAGE_PATH ${openhrp3_SOURCE_DIR})
+    else()
+      set(openhrp3_PACKAGE_PATH ${openhrp3_PREFIX}/share/openhrp3)
+    endif()
     if(EXISTS ${hrpsys_SOURCE_DIR})
       set(hrpsys_PACKAGE_PATH ${hrpsys_SOURCE_DIR})
     else()
-      set(hrpsys_PACKAGE_PATH ${hrpsys_PREFIX}/lib/hrpsys)
+      set(hrpsys_PACKAGE_PATH ${hrpsys_PREFIX}/share/hrpsys)
     endif()
     if(EXISTS ${hrpsys_tools_SOURCE_DIR})
       set(hrpsys_tools_PACKAGE_PATH ${hrpsys_tools_SOURCE_DIR})
@@ -281,21 +330,36 @@ macro(compile_collada_model daefile)
   endif()
   if(EXISTS ${hrpsys_PACKAGE_PATH}/bin/ProjectGenerator)
     set(_gen_project_dep_files ${hrpsys_PACKAGE_PATH}/bin/ProjectGenerator ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch)
+  elseif(EXISTS ${hrpsys_PREFIX}/lib/hrpsys/ProjectGenerator)
+    set(_gen_project_dep_files ${hrpsys_PREFIX}/ProjectGenerator ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch)
   else()
     # when hrpsys is catkin installed
     set(_gen_project_dep_files)
     message("assuming hrpsys/ProjectGenerator is already compiled")
   endif()
+  # this command should depends on the LATEST compile_robots, in order to prevent
+  # parallel execution of rostest
+  if (compile_robots)
+    list(LENGTH compile_robots _compile_robot_length)
+    math(EXPR _compile_robot_latest_index "${_compile_robot_length} - 1")
+    list(GET compile_robots ${_compile_robot_latest_index} _latest_robot)
+  endif(compile_robots)
+  message("compile_collada_model ${daefile}")
+  message("  hrpsys_tools_PACKAGE_PATH = ${hrpsys_tools_PACKAGE_PATH}")
+  message("  hrpsys_PACKAGE_PATH       = ${hrpsys_PACKAGE_PATH}")
+  message("  openhrp3_PACKAGE_PATH     = ${openhrp3_PACKAGE_PATH}")
+  set(_CMAKE_PREFIX_PATH "")
+  foreach(_PATH ${CMAKE_PREFIX_PATH})
+    set(_CMAKE_PREFIX_PATH "${_CMAKE_PREFIX_PATH}:${_PATH}")
+  endforeach()
   add_custom_command(OUTPUT ${_xmlfile}
     COMMAND ${_rtm_naming_exe} ${_corba_port}
-    COMMAND echo 'ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${daefile}${_proj_file_root_option} OUTPUT:=${_xmlfile} ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}' > /tmp/_gen_project_${_name}_xml.sh
-    COMMAND sh /tmp/_gen_project_${_name}_xml.sh
+    COMMAND sh -c "CMAKE_PREFIX_PATH=${_CMAKE_PREFIX_PATH} ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${daefile}${_proj_file_root_option} OUTPUT:=${_xmlfile} ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}"
     COMMAND pkill -KILL -f "omniNames -start ${_corba_port}" || echo "no process to kill"
-    DEPENDS ${daefile} ${_gen_project_dep_files})
+    DEPENDS ${daefile} ${_gen_project_dep_files} ${_latest_robot})
   add_custom_command(OUTPUT ${_xmlfile_nosim}
     COMMAND ${_rtm_naming_exe} ${_corba_port}
-    COMMAND echo 'ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${daefile}${_proj_file_root_option} OUTPUT:=${_xmlfile_nosim} INTEGRATE:=false ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}' > /tmp/_gen_project_${_name}_xml_nosim.sh
-    COMMAND sh /tmp/_gen_project_${_name}_xml_nosim.sh
+    COMMAND sh -c "CMAKE_PREFIX_PATH=${_CMAKE_PREFIX_PATH} ROS_PACKAGE_PATH=${hrpsys_tools_PACKAGE_PATH}:${hrpsys_PACKAGE_PATH}:${openhrp3_PACKAGE_PATH}:$ENV{ROS_PACKAGE_PATH} rostest -t ${hrpsys_tools_PACKAGE_PATH}/launch/_gen_project.launch CORBA_PORT:=${_corba_port} INPUT:=${daefile}${_proj_file_root_option} OUTPUT:=${_xmlfile_nosim} INTEGRATE:=false ${_conf_file_option} ${_robothardware_conf_file_option} ${_conf_dt_option} ${_simulation_timestep_option}"
     COMMAND pkill -KILL -f "omniNames -start ${_corba_port}" || echo "no process to kill"
     DEPENDS ${daefile} ${_gen_project_dep_files} ${_xmlfile})
   if(EXISTS ${_collada2eus_exe})
@@ -315,7 +379,6 @@ macro(compile_collada_model daefile)
   get_directory_property(_current_directory_properties ADDITIONAL_MAKE_CLEAN_FILES)
   set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES
     "${_workdir}/${_name}.conf;${_workdir}/${_name}.RobotHardware.conf;${_workdir}/${_name}_nosim.conf;${_workdir}/${_name}_nosim.RobotHardware.conf;${_current_directory_properties}")
-
   list(APPEND compile_robots ${_sname}_compile)
 endmacro(compile_collada_model daefile)
 
@@ -330,10 +393,18 @@ macro (generate_default_launch_eusinterface_files wrlfile project_pkg_name)
   set(MODEL_FILE ${wrlfile})
   set(ROBOT ${_name})
   set(robot ${_sname})
+  message("Generate launch files for ${ROBOT}")
+  message("  PROJECT_PKG_NAME = ${PROJECT_PKG_NAME}")
+  message("        MODEL_FILE = ${MODEL_FILE}")
+  message("             ROBOT = ${ROBOT}")
   if(${USE_ROSBUILD})
     rosbuild_find_ros_package(hrpsys_ros_bridge)
-  else()
+  elseif(EXISTS ${hrpsys_ros_bridge_SOURCE_DIR})
     set(hrpsys_ros_bridge_PACKAGE_PATH ${hrpsys_ros_bridge_SOURCE_DIR})
+  elseif(EXISTS ${hrpsys_ros_bridge_PREFIX})
+    set(hrpsys_ros_bridge_PACKAGE_PATH ${hrpsys_ros_bridge_PREFIX}/share/hrpsys_ros_bridge)
+  else()
+    message(FATAL_ERROR "hrpsys_ros_bridge_PACKAGE_PATH could not found")
   endif()
   set(${_sname}_generated_launch_euslisp_files)
   configure_file(${hrpsys_ros_bridge_PACKAGE_PATH}/scripts/default_robot_startup.launch.in ${PROJECT_SOURCE_DIR}/launch/${_sname}_startup.launch)
diff --git a/hrpsys_ros_bridge/euslisp/rtm-ros-robot-interface.l b/hrpsys_ros_bridge/euslisp/rtm-ros-robot-interface.l
index a6f6c83..1f29201 100644
--- a/hrpsys_ros_bridge/euslisp/rtm-ros-robot-interface.l
+++ b/hrpsys_ros_bridge/euslisp/rtm-ros-robot-interface.l
@@ -687,6 +687,17 @@
          (format zf "~%")
          ))) ;; with-open-file for .zmp file
     )
+  (when (cadr (memq :wrenches (car rs-list)))
+    (with-open-file
+     (wrf (format nil "~A.wrenches" output-basename) :direction :output) ;; wrench file -> force and moment ;; 6 x force-sensor-num
+     (dolist (l rs-list)
+       ;; write wrenches file
+       (format wrf "~A " (+ initial-sync-time (cadr (memq :time l))))
+       (let ((wr (cadr (memq :wrenches l))))
+         (dotimes (i (length wr)) (format wrf "~A " (elt wr i))))
+       (format wrf "~%")
+       )) ;; with-open-file for .wrenches file
+    )
   )
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
diff --git a/hrpsys_ros_bridge/launch/hrpsys_ros_bridge.launch b/hrpsys_ros_bridge/launch/hrpsys_ros_bridge.launch
index f7115f3..e072e80 100644
--- a/hrpsys_ros_bridge/launch/hrpsys_ros_bridge.launch
+++ b/hrpsys_ros_bridge/launch/hrpsys_ros_bridge.launch
@@ -61,7 +61,7 @@
         args="$(arg MODEL_FILE) $(arg SIMULATOR_NAME) HrpsysSeqStateROSBridge0 $(arg nameserver) $(arg omniorb_args)" output="$(arg OUTPUT)"/>
   <!-- BEGIN:openrtm connection -->
   <env name="SIMULATOR_NAME" value="$(arg SIMULATOR_NAME)" />
-  <node name="rtmlaunch_hrpsys_ros_bridge" pkg="openrtm_tools" type="rtmlaunch.py" args="$(find hrpsys_ros_bridge)/launch/hrpsys_ros_bridge.launch USE_COMMON=$(arg USE_COMMON) USE_WALKING=$(arg USE_WALKING) USE_COLLISIONCHECK=$(arg USE_COLLISIONCHECK) USE_IMPEDANCECONTROLLER=$(arg USE_IMPEDANCECONTROLLER) USE_SOFTERRORLIMIT=$(arg USE_SOFTERRORLIMIT) USE_IMAGESENSOR=$(arg USE_IMAGESENSOR) USE_ROBOTHARDWARE=$(arg USE_ROBOTHARDWARE) USE_TORQUECONTROLLER=$(arg USE_TORQUECONTROLLER) USE_TORQUEFILTER=$(arg USE_TORQUEFILTER)"/>
+  <node name="rtmlaunch_hrpsys_ros_bridge" pkg="openrtm_tools" type="rtmlaunch.py" args="$(find hrpsys_ros_bridge)/launch/hrpsys_ros_bridge.launch USE_COMMON=$(arg USE_COMMON) USE_WALKING=$(arg USE_WALKING) USE_COLLISIONCHECK=$(arg USE_COLLISIONCHECK) USE_IMPEDANCECONTROLLER=$(arg USE_IMPEDANCECONTROLLER) USE_SOFTERRORLIMIT=$(arg USE_SOFTERRORLIMIT) USE_IMAGESENSOR=$(arg USE_IMAGESENSOR) USE_ROBOTHARDWARE=$(arg USE_ROBOTHARDWARE) USE_TORQUECONTROLLER=$(arg USE_TORQUECONTROLLER) USE_TORQUEFILTER=$(arg USE_TORQUEFILTER)" output="$(arg OUTPUT)"/>
 
 
   <!-- All Robots -->
diff --git a/hrpsys_ros_bridge/manifest.xml b/hrpsys_ros_bridge/manifest.xml
index af7f417..c7147cb 100644
--- a/hrpsys_ros_bridge/manifest.xml
+++ b/hrpsys_ros_bridge/manifest.xml
@@ -10,6 +10,9 @@ hrpsys_ros_bridge.launch : hrpsys and ROS bridge software core launch script, th
   <review status="unreviewed" notes=""/>
   <url>http://ros.org/wiki/hrprtc_ros_bridge</url>
 
+  <rosdep name="pkg-config"/>
+
+  <!-- hrpsys -->
   <depend package="hrpsys"/>
   <depend package="hrpsys_tools"/>
   <depend package="openrtm_tools"/>
@@ -18,9 +21,22 @@ hrpsys_ros_bridge.launch : hrpsys and ROS bridge software core launch script, th
   <!-- seq state ros bridge -->
   <depend package="roscpp"/>
   <depend package="sensor_msgs"/>
+  <depend package="visualization_msgs"/>
   <depend package="robot_state_publisher"/>
   <depend package="actionlib"/>
-  <depend package="pr2_controllers_msgs"/>
+  <!-- pr2_controllers_msgs in manifest.xml is initially commented out
+       since rosmake -a seems to check manifest.xml and if some of depend is not found, 
+       it does not create dependency graph. To avoid this, we commented out.
+       However when make hrpsys_ros_bridge component, it uses pr2_controller_msgs,
+       so we need to comment in, this is done in sed command in execute_process 
+       CMakeLists.txt   -->
+  <!-- depend package="pr2_controllers_msgs"/ -->
+
+  <!-- these packages are added do to emporarily removal of pr2_controllers_msgs -->
+    <depend package="actionlib_msgs" />
+    <depend package="trajectory_msgs" />
+    <depend package="geometry_msgs" />
+
   <depend package="control_msgs"/>
   <depend package="tf" />
 
@@ -28,10 +44,12 @@ hrpsys_ros_bridge.launch : hrpsys and ROS bridge software core launch script, th
   <depend package="camera_info_manager" />
   <depend package="image_transport" />
   <depend package="dynamic_reconfigure" />
+  <depend package="diagnostic_aggregator" />
 
   <!-- dashboard -->
-  <depend package="robot_monitor"/>
-  <depend package="pr2_dashboard"/>
+  <!-- depend package="pr2_dashboard"/ -->
+
+  <rosdep name="collada_urdf"/>
 
   <!-- rtm* command -->
   <rosdep name="python-psutil"/>
diff --git a/hrpsys_ros_bridge/package.xml b/hrpsys_ros_bridge/package.xml
index 5e1e0eb..606733a 100644
--- a/hrpsys_ros_bridge/package.xml
+++ b/hrpsys_ros_bridge/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>hrpsys_ros_bridge</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>hrpsys_ros_bridge package provides basic functionalities to bind
   	<a href = "http://wiki.ros.org/hrpsys">hrpsys</a>, a 
   	<a href = "http://openrtm.org/">OpenRTM</a>-based controller, and ROS.<br /> 
@@ -24,11 +24,14 @@
 
   <buildtool_depend>catkin</buildtool_depend>
 
+  <build_depend>pkg-config</build_depend>
   <build_depend>actionlib</build_depend>
   <build_depend>camera_info_manager</build_depend>
+  <build_depend>collada_urdf</build_depend>
   <build_depend>control_msgs</build_depend>
   <build_depend>diagnostic_msgs</build_depend>
   <build_depend>dynamic_reconfigure</build_depend>
+  <build_depend>diagnostic_aggregator</build_depend>
   <build_depend>hrpsys</build_depend>
   <build_depend>image_transport</build_depend>
   <build_depend>pr2_controllers</build_depend> <!-- groovy does not have catkin pr2_controllers package -->
@@ -42,11 +45,15 @@
   <build_depend>sensor_msgs</build_depend>
   <build_depend>subversion</build_depend>
   <build_depend>tf</build_depend>
+  <build_depend>visualization_msgs</build_depend>
+  <build_depend>angles</build_depend>
   
   <run_depend>actionlib</run_depend>
   <run_depend>camera_info_manager</run_depend>
+  <run_depend>collada_urdf</run_depend>
   <run_depend>control_msgs</run_depend>
   <run_depend>diagnostic_msgs</run_depend>
+  <run_depend>diagnostic_aggregator</run_depend>
   <run_depend>dynamic_reconfigure</run_depend>
   <run_depend>hrpsys</run_depend>
   <run_depend>hrpsys_tools</run_depend>
@@ -59,6 +66,7 @@
   <run_depend>sensor_msgs</run_depend>
   <run_depend>pr2_controllers</run_depend> <!-- groovy does not have catkin pr2_controllers package -->
   <run_depend>tf</run_depend>
+  <run_depend>visualization_msgs</run_depend>
 
   <!-- <test_depend>hrpsys</test_depend> -->
   <!-- <test_depend>hrpsys_tools</test_depend> -->
diff --git a/hrpsys_ros_bridge/scripts/collision_state.py b/hrpsys_ros_bridge/scripts/collision_state.py
index 4241372..baf0052 100755
--- a/hrpsys_ros_bridge/scripts/collision_state.py
+++ b/hrpsys_ros_bridge/scripts/collision_state.py
@@ -39,10 +39,18 @@ def rtc_init () :
         ms = rtm.findRTCmanager(rtm.nshost)
         rospy.loginfo("[collision_state.py] wait for RTCmanager : ",ms)
 
-    co = rtm.findRTC(rospy.get_param('~comp_name', 'co'))
+    co = None
+    count = 0
+    while co  == None and count < 10:
+        co = rtm.findRTC(rospy.get_param('~comp_name', 'co'))
+        if co :
+            break
+        rospy.logwarn("Could not found CollisionDetector, waiting...")
+        time.sleep(1)
+        count += 1
     if co == None:
         rospy.logerr("Could not found CollisionDetector, exiting...")
-        exit(1)
+        exit(0)
     co_svc = narrow(co.service("service0"), "CollisionDetectorService")
 
     if modelfile:
diff --git a/hrpsys_ros_bridge/scripts/default_robot.launch.in b/hrpsys_ros_bridge/scripts/default_robot.launch.in
index 0afd919..a6e0ceb 100644
--- a/hrpsys_ros_bridge/scripts/default_robot.launch.in
+++ b/hrpsys_ros_bridge/scripts/default_robot.launch.in
@@ -3,16 +3,24 @@
   <arg name="NOSIM" default="false" />
   <arg name="REALTIME" default="false" />
   <arg name="RUN_RVIZ" default="true" />
+  <arg name="GUI" default="true" />
   <arg name="PROJECT_FILE" default="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@_nosim.xml" if="$(arg NOSIM)"/>
   <arg name="PROJECT_FILE" default="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@.xml" unless="$(arg NOSIM)"/>
+  <arg name="SIMULATOR_NAME" default="@ROBOT@(Robot)0" />
+  <arg name="corbaport" default="15005" />
   <include file="$(find @PROJECT_PKG_NAME@)/launch/@robot@_startup.launch" >
     <arg name="KILL_SERVERS" default="$(arg KILL_SERVERS)" />
     <arg name="NOSIM" value="$(arg NOSIM)" />
     <arg name="PROJECT_FILE" value="$(arg PROJECT_FILE)" />
+    <arg name="SIMULATOR_NAME" value="$(arg SIMULATOR_NAME)" />
     <arg name="REALTIME" default="$(arg REALTIME)" />
+    <arg name="corbaport" default="$(arg corbaport)" />
+    <arg name="GUI" default="$(arg GUI)" />
   </include>
   <include file="$(find @PROJECT_PKG_NAME@)/launch/@robot@_ros_bridge.launch" >
+    <arg name="SIMULATOR_NAME" value="$(arg SIMULATOR_NAME)" />
     <arg name="RUN_RVIZ" default="$(arg RUN_RVIZ)" />
+    <arg name="corbaport" default="$(arg corbaport)" />
   </include>
 
   <sphinxdoc><![CDATA[
diff --git a/hrpsys_ros_bridge/scripts/default_robot_ros_bridge.launch.in b/hrpsys_ros_bridge/scripts/default_robot_ros_bridge.launch.in
index dadb42d..2634ae2 100644
--- a/hrpsys_ros_bridge/scripts/default_robot_ros_bridge.launch.in
+++ b/hrpsys_ros_bridge/scripts/default_robot_ros_bridge.launch.in
@@ -1,12 +1,15 @@
 <launch>
   <arg name="RUN_RVIZ" default="true" />
+  <arg name="SIMULATOR_NAME" default="@ROBOT@(Robot)0" />
   <rosparam command="load"
             file="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@_controller_config.yaml" />
 
+  <arg name="corbaport" default="15005" />
   <include file="$(find hrpsys_ros_bridge)/launch/hrpsys_ros_bridge.launch">
-    <arg name="SIMULATOR_NAME" value="@ROBOT@(Robot)0" />
+    <arg name="SIMULATOR_NAME" value="$(arg SIMULATOR_NAME)" />
     <arg name="MODEL_FILE" value="@MODEL_FILE@" />
     <arg name="COLLADA_FILE" value="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@.dae" />
+    <arg name="corbaport" default="$(arg corbaport)" />
   </include>
 
   <group if="$(arg RUN_RVIZ)" >
diff --git a/hrpsys_ros_bridge/scripts/default_robot_startup.launch.in b/hrpsys_ros_bridge/scripts/default_robot_startup.launch.in
index 3eeeb2a..01450bb 100644
--- a/hrpsys_ros_bridge/scripts/default_robot_startup.launch.in
+++ b/hrpsys_ros_bridge/scripts/default_robot_startup.launch.in
@@ -1,16 +1,21 @@
 <launch>
   <arg name="KILL_SERVERS" default="false" />
+  <arg name="GUI" default="true" />
   <arg name="NOSIM" default="false" />
   <arg name="REALTIME" default="false" />
+  <arg name="SIMULATOR_NAME" default="@ROBOT@(Robot)0" />
   <arg name="PROJECT_FILE" default="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@_nosim.xml" if="$(arg NOSIM)"/>
   <arg name="PROJECT_FILE" default="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@.xml" unless="$(arg NOSIM)"/>
+  <arg name="corbaport" default="15005" />
   <param name="use_sim_time" value="true" />
   <include file="$(find hrpsys_tools)/launch/hrpsys.launch">
     <arg name="PROJECT_FILE" value="$(arg PROJECT_FILE)"/>
     <arg name="MODEL_FILE" value="@MODEL_FILE@" />
     <arg name="CONF_FILE" value="$(find @PROJECT_PKG_NAME@)/models/@ROBOT@.conf" />
-    <arg name="SIMULATOR_NAME" value="@ROBOT@(Robot)0" />
+    <arg name="SIMULATOR_NAME" value="$(arg SIMULATOR_NAME)" />
     <arg name="KILL_SERVERS" default="$(arg KILL_SERVERS)" />
     <arg name="REALTIME" default="$(arg REALTIME)" />
+    <arg name="corbaport" default="$(arg corbaport)" />
+    <arg name="GUI" default="$(arg GUI)" />
   </include>
 </launch>
diff --git a/hrpsys_ros_bridge/scripts/hrpsys_profile.py b/hrpsys_ros_bridge/scripts/hrpsys_profile.py
index a9fb548..865aeba 100755
--- a/hrpsys_ros_bridge/scripts/hrpsys_profile.py
+++ b/hrpsys_ros_bridge/scripts/hrpsys_profile.py
@@ -90,12 +90,13 @@ if __name__ == '__main__':
         r = rospy.Rate(1) # 10hz
 
         while not rospy.is_shutdown():
-            hrpsys_profile()
             try :
                 hrpsys_profile()
             except (omniORB.CORBA.TRANSIENT, omniORB.CORBA.BAD_PARAM, omniORB.CORBA.COMM_FAILURE), e :
                 print "[hrpsys_profile.py] catch exception", e
-                rtc_init(hostname)
+                rtc_init()
+            except Exception, e:
+                pass
 
             r.sleep()
         
diff --git a/hrpsys_ros_bridge/setup.py b/hrpsys_ros_bridge/setup.py
new file mode 100644
index 0000000..8074704
--- /dev/null
+++ b/hrpsys_ros_bridge/setup.py
@@ -0,0 +1,11 @@
+## ! DO NOT MANUALLY INVOKE THIS setup.py, USE CATKIN INSTEAD
+
+from distutils.core import setup
+from catkin_pkg.python_setup import generate_distutils_setup
+
+# fetch values from package.xml
+setup_args = generate_distutils_setup(
+    packages=['hrpsys_ros_bridge'],
+    package_dir={'': 'src'})
+
+setup(**setup_args)
diff --git a/hrpsys_ros_bridge/test/test-compile-robot.cmake b/hrpsys_ros_bridge/test/test-compile-robot.cmake
new file mode 100644
index 0000000..c01a6e2
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-compile-robot.cmake
@@ -0,0 +1,41 @@
+cmake_minimum_required(VERSION 2.4.6)
+project(hrpsys_ros_bridge_test)
+
+# for rosbuild
+message("USE_ROSBUILD = ${USE_ROSBUILD}")
+if(USE_ROSBUILD)
+  include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
+  rosbuild_find_ros_package(hrpsys_ros_bridge)
+  include(${hrpsys_ros_bridge_PACKAGE_PATH}/cmake/compile_robot_model.cmake)
+else() # catkin
+  find_package(catkin REQUIRED COMPONENTS hrpsys_ros_bridge hrpsys_tools)
+endif()
+
+execute_process(COMMAND pkg-config openhrp3.1 --variable=idl_dir
+  OUTPUT_VARIABLE _OPENHRP3_IDL_DIR
+  RESULT_VARIABLE _OPENHRP3_RESULT
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+set(_OPENHRP3_MODEL_DIR ${_OPENHRP3_IDL_DIR}/../sample/model)
+if(NOT _OPENHRP3_RESULT EQUAL 0)
+  message(FATAL_ERROR "Fail to run pkg-config ${_OPENHRP3_RESULT}")
+endif()
+if(NOT EXISTS ${_OPENHRP3_IDL_DIR})
+  message(FATAL_ERROR "Path ${_OPENHRP3_IDL_DIR} is not exists")
+endif()
+if(NOT EXISTS ${_OPENHRP3_MODEL_DIR})
+  message(FATAL_ERROR "Path ${_OPENHRP3_MODEL_DIR} is not exists")
+endif()
+
+    find_package(hrpsys_tools)
+    message("hrpsys_ros_bridge_SOURCE_DIR ---> ${hrpsys_ros_bridge_SOURCE_DIR}")
+    message("     hrpsys_tools_SOURCE_DIR ---> ${hrpsys_tools_SOURCE_DIR}")
+    message("         hrpsys_tools_PREFIX ---> ${hrpsys_tools_PREFIX}")
+
+message("[hrpsys_ros_bridge/test] Path ${_OPENHRP3_MODEL_DIR} exists")
+
+# macro(compile_openhrp_model wrlfile) # compile openhrp3 model to collada and project file
+compile_openhrp_model(${_OPENHRP3_MODEL_DIR}/sample1.wrl SampleRobot)
+generate_default_launch_eusinterface_files("\$(find hrpsys_ros_bridge_test)/models/SampleRobot.dae" hrpsys_ros_bridge SampleRobot)
+
+
+# macro(compile_collada_model daefile) # compile collada model project file
diff --git a/hrpsys_ros_bridge/test/test-compile-robot.sh b/hrpsys_ros_bridge/test/test-compile-robot.sh
new file mode 100755
index 0000000..367c4f3
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-compile-robot.sh
@@ -0,0 +1,27 @@
+#!/bin/bash
+
+CATKIN_DIR=/tmp/test_compile_robot_$$
+rm -fr ${CATKIN_DIR}
+mkdir -p ${CATKIN_DIR}/src/hrpsys_ros_bridge_test
+cp `rospack find hrpsys_ros_bridge`/test/test-compile-robot.cmake ${CATKIN_DIR}/src/hrpsys_ros_bridge_test/CMakeLists.txt
+cp `rospack find hrpsys_ros_bridge`/test/test-compile-robot.xml   ${CATKIN_DIR}/src/hrpsys_ros_bridge_test/package.xml
+# copy hrpsys_tools
+ln -sf `rospack find hrpsys_tools` ${CATKIN_DIR}/src/hrpsys_tools
+cd ${CATKIN_DIR}
+catkin_make
+source ${CATKIN_DIR}/devel/setup.bash
+yes | rosrun openrtm_aist rtm-naming
+roslaunch hrpsys_ros_bridge_test samplerobot.launch corbaport:=2809 GUI:=false RUN_RVIZ:=false
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/hrpsys_ros_bridge/test/test-compile-robot.xml b/hrpsys_ros_bridge/test/test-compile-robot.xml
new file mode 100644
index 0000000..0557c16
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-compile-robot.xml
@@ -0,0 +1,16 @@
+<package>
+  <name>hrpsys_ros_bridge_test</name>
+  <version>0.0.1</version>
+  <description> hrpsys_ros_bridge_test </description>
+  <maintainer email="k-okada@jsk.t.u-tokyo.ac.jp">Kei Okada</maintainer>
+
+  <license>BSD</license>
+
+  <buildtool_depend>catkin</buildtool_depend>
+
+  <build_depend>hrpsys_tools</build_depend>
+
+  <export>
+
+  </export>
+</package>
diff --git a/hrpsys_ros_bridge/test/test-pa10.py b/hrpsys_ros_bridge/test/test-pa10.py
new file mode 100755
index 0000000..39dd8f6
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-pa10.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+
+PKG = 'hrpsys_ros_bridge'
+NAME = 'test-samplerobot'
+
+import imp  ## for rosbuild
+try:
+    imp.find_module(PKG)
+except:
+    import roslib; roslib.load_manifest(PKG)
+
+import argparse,unittest,rostest, time, sys, math
+from numpy import *
+
+import rospy,rospkg, tf
+from geometry_msgs.msg import WrenchStamped
+from hrpsys_ros_bridge.srv import OpenHRP_SequencePlayerService_loadPattern, OpenHRP_SequencePlayerService_waitInterpolation
+
+import actionlib
+
+from pr2_controllers_msgs.msg import JointTrajectoryAction, JointTrajectoryGoal
+from trajectory_msgs.msg import JointTrajectoryPoint
+
+class TestPA10Robot(unittest.TestCase):
+    listener = None
+    lfsensor = None
+    rfsensor = None
+
+    def setUp(self):
+        rospy.init_node('TestPA10Robot')
+        self.listener = tf.TransformListener()
+
+    def test_tf_odom_J7_LINK(self): # need to check if map/ is published?
+        try:
+            self.listener.waitForTransform('/odom', '/J7_LINK', rospy.Time(), rospy.Duration(120))
+        except tf.Exception:
+            self.assertTrue(None, "could not found tf from /odom to /J7_LINK")
+        (trans,rot) = self.listener.lookupTransform('/odom', '/J7_LINK', rospy.Time(0))
+        rospy.logwarn("tf_echo /odom /J7_LINK %r %r"%(trans,rot))
+        self.assertAlmostEqual(trans[2],1.0,delta=0.5)
+
+    # send joint angles
+    def test_joint_angles(self):
+        larm = actionlib.SimpleActionClient("/fullbody_controller/joint_trajectory_action", JointTrajectoryAction)
+        larm.wait_for_server()
+
+        try:
+            self.listener.waitForTransform('/BASE_LINK', '/J7_LINK', rospy.Time(), rospy.Duration(120))
+        except tf.Exception:
+            self.assertTrue(None, "could not found tf from /BASE_LINK to /J7_LINK")
+        (trans1,rot1) = self.listener.lookupTransform('/BASE_LINK', '/J7_LINK', rospy.Time(0))
+        rospy.logwarn("tf_echo /BASE_LINK /J7_LINK %r %r"%(trans1,rot1))
+        goal = JointTrajectoryGoal()
+        goal.trajectory.header.stamp = rospy.get_rostime()
+        goal.trajectory.joint_names.append("J1")
+        goal.trajectory.joint_names.append("J2")
+        goal.trajectory.joint_names.append("J3")
+        goal.trajectory.joint_names.append("J4")
+        goal.trajectory.joint_names.append("J5")
+        goal.trajectory.joint_names.append("J6")
+        goal.trajectory.joint_names.append("J7")
+
+        point = JointTrajectoryPoint()
+        point.positions = [ x * math.pi / 180.0 for x in [10,20,30,40,50,60,70] ]
+        point.time_from_start = rospy.Duration(5.0)
+        goal.trajectory.points.append(point)
+        larm.send_goal(goal)
+        larm.wait_for_result()
+        (trans2,rot2) = self.listener.lookupTransform('/BASE_LINK', '/J7_LINK', rospy.Time(0))
+        rospy.logwarn("tf_echo /BASE_LINK /J7_LINK %r %r"%(trans2,rot2))
+        rospy.logwarn("difference between two /J7_LINK %r %r"%(array(trans1)-array(trans2),linalg.norm(array(trans1)-array(trans2))))
+        self.assertNotAlmostEqual(linalg.norm(array(trans1)-array(trans2)), 0, delta=0.1)
+
+# unittest.main()
+if __name__ == '__main__':
+    import rostest
+    rostest.run(PKG, NAME, TestPA10Robot, sys.argv)
diff --git a/hrpsys_ros_bridge/test/test-pa10.test b/hrpsys_ros_bridge/test/test-pa10.test
new file mode 100644
index 0000000..3b8bb0c
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-pa10.test
@@ -0,0 +1,20 @@
+<launch>
+
+  <include file="$(find hrpsys_ros_bridge)/launch/pa10.launch" >
+    <arg name="corbaport" default="2809" />
+    <arg name="GUI" default="false" />
+    <arg name="RUN_RVIZ" default="false" />
+    <arg name="SIMULATOR_NAME" default="HRP1(Robot)0" />
+  </include>
+
+  <!-- check if tf is published -->       
+  <param name="hztest_tf/topic" value="/tf" />
+  <param name="hztest_tf/wait_time" value="100" />
+  <param name="hztest_tf/hz" value="1000.0" />
+  <param name="hztest_tf/hzerror" value="2000.0" />
+  <param name="hztest_tf/test_duration" value="5.0" />
+  <test test-name="hztest_tf" pkg="rostest" type="hztest" name="hztest_tf" retry="4" />
+
+  <test test-name="pa10" pkg="hrpsys_ros_bridge" type="test-pa10.py" retry="4" />
+
+</launch>
diff --git a/hrpsys_ros_bridge/test/test-samplerobot.py b/hrpsys_ros_bridge/test/test-samplerobot.py
new file mode 100755
index 0000000..63fe58c
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-samplerobot.py
@@ -0,0 +1,110 @@
+#!/usr/bin/env python
+
+PKG = 'hrpsys_ros_bridge'
+NAME = 'test-samplerobot'
+
+import imp  ## for rosbuild
+try:
+    imp.find_module(PKG)
+except:
+    import roslib; roslib.load_manifest(PKG)
+
+import argparse,unittest,rostest, time, sys, math
+from numpy import *
+
+import rospy,rospkg, tf
+from geometry_msgs.msg import WrenchStamped
+from hrpsys_ros_bridge.srv import OpenHRP_SequencePlayerService_loadPattern, OpenHRP_SequencePlayerService_waitInterpolation
+
+import actionlib
+
+from pr2_controllers_msgs.msg import JointTrajectoryAction, JointTrajectoryGoal
+from trajectory_msgs.msg import JointTrajectoryPoint
+
+class TestSampleRobot(unittest.TestCase):
+    listener = None
+    lfsensor = None
+    rfsensor = None
+
+    def lfsensor_cb(self, sensor):
+        self.lfsensor = sensor
+
+    def rfsensor_cb(self, sensor):
+        self.rfsensor = sensor
+
+    def setUp(self):
+        rospy.init_node('TestSampleRobot')
+        rospy.Subscriber('/lfsensor', WrenchStamped, self.lfsensor_cb)
+        rospy.Subscriber('/rfsensor', WrenchStamped, self.rfsensor_cb)
+        self.listener = tf.TransformListener()
+
+    def test_tf_imu_floor_WAIST_LINK(self): # need to check if map/ is published?
+        try:
+            self.listener.waitForTransform('/imu_floor', '/WAIST_LINK0', rospy.Time(), rospy.Duration(120))
+        except tf.Exception:
+            self.assertTrue(None, "could not found tf from /imu_floor to /WAIST_LINK0")
+        (trans,rot) = self.listener.lookupTransform('/imu_floor', '/WAIST_LINK0', rospy.Time(0))
+        rospy.logwarn("tf_echo /imu_floor /WAIST_LINK0 %r %r"%(trans,rot))
+        self.assertAlmostEqual(trans[2],0.7235,2)
+        self.assertTrue(True,"ok")
+
+    def test_force_sensor(self):
+        while self.lfsensor == None or self.rfsensor == None:
+            time.sleep(1)
+            rospy.logwarn("wait for sensor...")
+        rospy.logwarn("sensor = %r %r"%(self.lfsensor, self.rfsensor))
+        self.assertAlmostEqual(self.lfsensor.wrench.force.z+self.rfsensor.wrench.force.z, 1300, delta=200)
+
+    # send walk motion
+    def test_load_pattern(self):
+        rospy.wait_for_service('/SequencePlayerServiceROSBridge/loadPattern')
+        load_pattern = rospy.ServiceProxy('/SequencePlayerServiceROSBridge/loadPattern', OpenHRP_SequencePlayerService_loadPattern)
+        wait_interpolation = rospy.ServiceProxy('/SequencePlayerServiceROSBridge/waitInterpolation', OpenHRP_SequencePlayerService_waitInterpolation)
+        basename = rospkg.RosPack().get_path('openhrp3')+'/share/OpenHRP-3.1/sample/controller/SampleController/etc/Sample'
+        tm = 1.0
+        ret = load_pattern(basename = basename, tm = tm)
+        t1 = rospy.get_time()
+        rospy.logwarn("loadPattern = %r %r"%(basename, tm))
+        ret = wait_interpolation()
+        t2 = rospy.get_time()
+        rospy.logwarn("waitInterpolation %f"%(t2-t1))
+        (trans,rot) = self.listener.lookupTransform('/imu_floor', '/WAIST_LINK0', rospy.Time(0))
+        rospy.logwarn("tf_echo /odom /WAIST_LINK0 %r %r"%(trans,rot))
+        self.assertAlmostEqual(t2-t1, 20, delta=5)
+        #self.assertNotAlmostEqual(trans[1],0,2)
+
+    # send joint angles
+    def test_joint_angles(self):
+        larm = actionlib.SimpleActionClient("/larm_controller/joint_trajectory_action", JointTrajectoryAction)
+        larm.wait_for_server()
+
+        try:
+            self.listener.waitForTransform('/WAIST_LINK0', '/LARM_LINK7', rospy.Time(), rospy.Duration(120))
+        except tf.Exception:
+            self.assertTrue(None, "could not found tf from /WAIST_LINK0 to /LARM_LINK7")
+        (trans1,rot1) = self.listener.lookupTransform('/WAIST_LINK0', '/LARM_LINK7', rospy.Time(0))
+        rospy.logwarn("tf_echo /WAIST_LINK0 /LARM_LINK7 %r %r"%(trans1,rot1))
+        goal = JointTrajectoryGoal()
+        goal.trajectory.header.stamp = rospy.get_rostime()
+        goal.trajectory.joint_names.append("LARM_SHOULDER_P")
+        goal.trajectory.joint_names.append("LARM_SHOULDER_R")
+        goal.trajectory.joint_names.append("LARM_SHOULDER_Y")
+        goal.trajectory.joint_names.append("LARM_ELBOW")
+        goal.trajectory.joint_names.append("LARM_WRIST_Y")
+        goal.trajectory.joint_names.append("LARM_WRIST_P")
+
+        point = JointTrajectoryPoint()
+        point.positions = [ x * math.pi / 180.0 for x in [30,30,30,-90,-40,-30] ]
+        point.time_from_start = rospy.Duration(5.0)
+        goal.trajectory.points.append(point)
+        larm.send_goal(goal)
+        larm.wait_for_result()
+        (trans2,rot2) = self.listener.lookupTransform('/WAIST_LINK0', '/LARM_LINK7', rospy.Time(0))
+        rospy.logwarn("tf_echo /WAIST_LINK0 /LARM_LINK7 %r %r"%(trans2,rot2))
+        rospy.logwarn("difference between two /LARM_LINK7 %r %r"%(array(trans1)-array(trans2),linalg.norm(array(trans1)-array(trans2))))
+        self.assertNotAlmostEqual(linalg.norm(array(trans1)-array(trans2)), 0, delta=0.1)
+
+#unittest.main()
+if __name__ == '__main__':
+    import rostest
+    rostest.run(PKG, NAME, TestSampleRobot, sys.argv)
diff --git a/hrpsys_ros_bridge/test/test-samplerobot.test b/hrpsys_ros_bridge/test/test-samplerobot.test
new file mode 100644
index 0000000..8fdb6f1
--- /dev/null
+++ b/hrpsys_ros_bridge/test/test-samplerobot.test
@@ -0,0 +1,19 @@
+<launch>
+
+  <include file="$(find hrpsys_ros_bridge)/launch/samplerobot.launch" >
+    <arg name="corbaport" default="2809" />
+    <arg name="GUI" default="false" />
+    <arg name="RUN_RVIZ" default="false" />
+  </include>
+
+  <!-- check if tf is published -->       
+  <param name="hztest_tf/topic" value="/tf" />
+  <param name="hztest_tf/wait_time" value="100" />
+  <param name="hztest_tf/hz" value="1000.0" />
+  <param name="hztest_tf/hzerror" value="2000.0" />
+  <param name="hztest_tf/test_duration" value="5.0" />
+  <test test-name="hztest_tf" pkg="rostest" type="hztest" name="hztest_tf" retry="4" />
+
+  <test test-name="samplerobot" pkg="hrpsys_ros_bridge" type="test-samplerobot.py" retry="4" />
+
+</launch>
diff --git a/hrpsys_tools/CHANGELOG.rst b/hrpsys_tools/CHANGELOG.rst
new file mode 100644
index 0000000..4dc539e
--- /dev/null
+++ b/hrpsys_tools/CHANGELOG.rst
@@ -0,0 +1,84 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package hrpsys_tools
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+* add respawn to rtcd/hrpsys-simulator, RESPAWN_MODELLOADER, RESPAWN_SIMULATOR, RESPAWN_RTCD, see Issue #380
+* hrpsys_tools: (test-pa10.test) run unittest first, then test hcf
+* hrpsys_tools, hrpsys_ros_bridge: increase retly to 4 for test
+* hrpsys_tools: add rosbuild_add_rostest to CMakeList.txt and fix test-hrpsys-config.py to load_mafest for rosbuild environment
+* add retry=2 tag, since we staill have trouble on connection sometimes (https://code.google.com/p/hrpsys-base/issues/detail?id=192)
+* add launch-prefix argument for hrpsys_py node
+* add samples direcotry to install
+* add -c option to specify commands to execute
+* set RobotHardware name due to api change of hrpsys_tools_config.py
+* add samples direcotry to install
+* use -c to specify commands
+* add -c option to specify commands to execute
+* forge to add
+* set RobotHardware name due to api change of hrpsys_tools_config.py
+* add test code that uses hrpsys.launch
+* add waitForRTCManagerAndRobotHardware for interactive mode
+* remove openrtm_aist_python from find_package
+* add interactive mode, invoke with ipython ... or -i option
+* add sample code of interactive mode of hrpsys_tools_config.py in test-hrpsys-config-test
+* fix test code to work with clean environment
+* fix python code syntax error
+* fix typo
+* write contents of test-hrpsys.test
+* Update test-hrpsys-config.py
+  rename testHrpsysConfigurator -> TestHrpsysConfigurator
+* add test/test-hrpsys-config.test
+* add depend hrpsys to fke rosdep install
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+* add hrpsys_tools to depends on openrtm_tools, see Issue 309
+* (hrpsys_tools, rosnode_rtc, rtmbuild) maintainer name adjusted to the one used in other places
+* add config file for TorqueController
+* add argument to set joint propeties according to hrpsys-base -r906 commit ;; we can set joint properties such as .angle, .mode, and so on ;; http://www.openrtp.jp/openhrp3/jp/create_project.html
+* add argument to set timeStep according to hrpsys-base -r905 commit ;; we can set timeStep <= dt ;; http://www.openrtp.jp/openhrp3/jp/create_project.html
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+* rename hrpsys_config.py because there is the package with the same name in hrpsys
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* forget to fix corba port to 15005, see Issue 141
+* fix catkin.cmake for installed project
+* add import OpenRTM_aist.RTM_IDL, for catkin
+* fix catkin.cmake, since openrtm_aist/openhrp3/hrpsys is compiled as non-catkin package (this means catkin_make does not install <package>.pc <package>Config.cmake and use DEPENDS not CATKIN-DEPENDS)
+* set default corbaport to 5005, Fixes Issue 141
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Updated all package.xml in rtmros_common metapkg (add URLs, alphabetized, cleanup, add Isaac as a maintainer to receive notice from buildfarm).
+* install scripts
+* catkinize
+* remove export /scripts, see https://code.google.com/p/rtm-ros-robotics/wiki/rtm_ros_common_201307_migration
+* create dummy hrpsys_config for ros users : due to hrpsys_config.py move to hrpsys-base, see https://code.google.com/p/hrpsys-base/source/browse/trunk/python/hrpsys_config.py
+* revert : hrpsys_config.py move to hrpsys-base, see https://code.google.com/p/hrpsys-base/source/browse/trunk/python/hrpsys_config.py
+* hrpsys_config.py move to hrpsys-base, see https://code.google.com/p/hrpsys-base/source/browse/trunk/python/hrpsys_config.py
+* hrpsys_config.py move to hrpsys-base, see https://code.google.com/p/hrpsys-base/source/browse/trunk/python/hrpsys_config.py
+* add depends to hrpsys
+* fix package name openrtm->openrtm_tools
+* circular dependency is not alloweded
+* add hrpsys_tools: cleanup hrpsys, split hrpsys and hrpsys_tools, Issue 137
+* Contributors: Kei Okada, gm130s@gmail.com, kei.okada, notheworld@gmail.com, youhei@jsk.imi.i.u-tokyo.ac.jp
diff --git a/hrpsys_tools/CMakeLists.txt b/hrpsys_tools/CMakeLists.txt
index 797d193..22d59b2 100644
--- a/hrpsys_tools/CMakeLists.txt
+++ b/hrpsys_tools/CMakeLists.txt
@@ -32,3 +32,6 @@ set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
 #rosbuild_link_boost(${PROJECT_NAME} thread)
 #rosbuild_add_executable(example examples/example.cpp)
 #target_link_libraries(example ${PROJECT_NAME})
+
+rosbuild_add_rostest(test/test-hrpsys-config.test)
+rosbuild_add_rostest(test/test-pa10.test)
diff --git a/hrpsys_tools/catkin.cmake b/hrpsys_tools/catkin.cmake
index 5c40c11..79a094d 100644
--- a/hrpsys_tools/catkin.cmake
+++ b/hrpsys_tools/catkin.cmake
@@ -4,7 +4,7 @@ project(hrpsys_tools)
 ## Find catkin macros and libraries
 ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
 ## is used, also find other catkin packages
-find_package(catkin REQUIRED COMPONENTS openrtm_aist_python)
+find_package(catkin REQUIRED COMPONENTS rostest)
 
 ## System dependencies are found with CMake's conventions
 # find_package(Boost REQUIRED COMPONENTS system)
@@ -134,3 +134,6 @@ install(DIRECTORY scripts DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} USE_SO
 
 ## Add folders to be run by python nosetests
 # catkin_add_nosetests(test)
+install(DIRECTORY test samples DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} USE_SOURCE_PERMISSIONS)
+add_rostest(test/test-hrpsys-config.test)
+add_rostest(test/test-pa10.test)
diff --git a/hrpsys_tools/launch/hrpsys.launch b/hrpsys_tools/launch/hrpsys.launch
index d2f4796..1feb43a 100644
--- a/hrpsys_tools/launch/hrpsys.launch
+++ b/hrpsys_tools/launch/hrpsys.launch
@@ -4,7 +4,9 @@
   <arg name="PROJECT_FILE" />
   <arg name="MODEL_FILE" />
   <arg name="CONF_FILE" />
-  <arg name="RESPAWN" default="true"/>
+  <arg name="RESPAWN_MODELLOADER" default="true"/>
+  <arg name="RESPAWN_RTCD" default="false" />
+  <arg name="RESPAWN_SIMULATOR" default="true" />
   <arg name="OUTPUT" default="log"/>
   <arg name="SIMULATOR_NAME"/>
   <env name="LANG" value="C" />
@@ -87,15 +89,15 @@
 
   <node name="modelloader" pkg="openhrp3" type="openhrp-model-loader"
         args="$(arg omniorb_args)"
-        respawn="$(arg RESPAWN)" output="screen"
+        respawn="$(arg RESPAWN_MODELLOADER)" output="screen"
         if="$(arg openrtm_openhrp_server_start)"/> <!-- loading dae files crushes model loader -->
 
   <node if="$(arg USE_RTCD)"
-        name="hrpsys" pkg="openrtm_aist" type="rtcd" output="$(arg OUTPUT)"
+        name="hrpsys" pkg="openrtm_aist" type="rtcd" respawn="$(arg RESPAWN_RTCD)" output="$(arg OUTPUT)"
         launch-prefix="$(arg RTCD_LAUNCH_PREFIX)"
         args="$(arg PROJECT_FILE) -o manager.is_master:YES $(arg openrtm_args) $(arg hrpsys_args)" />
   <node unless="$(arg USE_RTCD)"
-        name="hrpsys" pkg="hrpsys" type="hrpsys-simulator" output="$(arg OUTPUT)"
+        name="hrpsys" pkg="hrpsys" type="hrpsys-simulator" respawn="$(arg RESPAWN_SIMULATOR)" output="$(arg OUTPUT)"
         launch-prefix="$(arg RTCD_LAUNCH_PREFIX)"
         args="$(arg PROJECT_FILE) -o manager.is_master:YES $(arg openrtm_args) $(arg hrpsys_gui_args) $(arg hrpsys_opt_args) $(arg hrpsys_args)" />
 
@@ -103,7 +105,8 @@
 
   <group if="$(arg LAUNCH_HRPSYSPY)">
     <node name="hrpsys_py" pkg="$(arg HRPSYS_PY_PKG)" type="$(arg HRPSYS_PY_NAME)" output="screen"
-          args='$(arg SIMULATOR_NAME) $(arg MODEL_FILE) $(arg omniorb_args)' />
+          args='$(arg SIMULATOR_NAME) $(arg MODEL_FILE) $(arg omniorb_args)'
+          launch-prefix="$(arg RTCD_LAUNCH_PREFIX)" />
   </group>
 
   <!-- <node name="abstransform2posrpy" pkg="hrpsys" type="AbsTransformToPosRpy" output="$(arg OUTPUT)" -->
diff --git a/hrpsys_tools/manifest.xml b/hrpsys_tools/manifest.xml
index d84dba3..ae0a2b2 100644
--- a/hrpsys_tools/manifest.xml
+++ b/hrpsys_tools/manifest.xml
@@ -10,6 +10,9 @@
   <url>http://ros.org/wiki/hrpsys_tools</url>
 
   <depend package="hrpsys"/>
+
+  <rosdep name="hrpsys"/>
+  <rosdep name="rostest"/>
   
 </package>
 
diff --git a/hrpsys_tools/package.xml b/hrpsys_tools/package.xml
index 219c90d..78ffc1b 100644
--- a/hrpsys_tools/package.xml
+++ b/hrpsys_tools/package.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <package>
   <name>hrpsys_tools</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>The hrpsys_tools package</description>
 
   <maintainer email="k-okada@jsk.t.u-tokyo.ac.jp">Kei Okada</maintainer>
@@ -17,6 +17,7 @@
   <buildtool_depend>catkin</buildtool_depend>
 
   <build_depend>hrpsys</build_depend>
+  <build_depend>rostest</build_depend>
 
   <run_depend>hrpsys</run_depend>
   <run_depend>openrtm_tools</run_depend>
diff --git a/hrpsys_tools/samples/pa10.launch b/hrpsys_tools/samples/pa10.launch
new file mode 100644
index 0000000..92f30d8
--- /dev/null
+++ b/hrpsys_tools/samples/pa10.launch
@@ -0,0 +1,12 @@
+<launch>
+  <arg name="GUI" default="true" />
+  <arg name="corbaport" default="15005" />
+  <include file="$(find hrpsys_tools)/launch/hrpsys.launch" >
+    <arg name="MODEL_FILE" value="$(find openhrp3)/share/OpenHRP-3.1/sample/model/sample1.wrl" />
+    <arg name="CONF_FILE" value="$(find  hrpsys)/share/hrpsys/samples/PA10/PA10.conf" />
+    <arg name="PROJECT_FILE" value="$(find  hrpsys)/share/hrpsys/samples/PA10/PA10simulation.xml" />
+    <arg name="SIMULATOR_NAME" value="PA10Controller(Robot)0" />
+    <arg name="GUI" default="$(arg GUI)" />
+    <arg name="corbaport" default="$(arg corbaport)" />
+  </include>
+</launch>
diff --git a/hrpsys_tools/scripts/hrpsys_tools_config.py b/hrpsys_tools/scripts/hrpsys_tools_config.py
index 70b7124..923379a 100755
--- a/hrpsys_tools/scripts/hrpsys_tools_config.py
+++ b/hrpsys_tools/scripts/hrpsys_tools_config.py
@@ -3,15 +3,46 @@ import roslib; roslib.load_manifest("hrpsys")
 import OpenRTM_aist.RTM_IDL # for catkin
 import sys
 
-import hrpsys
+from hrpsys import rtm
 from hrpsys.hrpsys_config import *
 import OpenHRP
-#from hrpsys.hrpsys_config import HrpsysConfigurator
 
 # copy from hrpsys/lib/python2.7/dist-packages/hrpsys_config.py
+import argparse, code
 if __name__ == '__main__':
+    parser = argparse.ArgumentParser(description="hrpsys command line interpreters, try `./hrpsys_tools_config.py--host xxxx --port xxxx  -i` or `ipython ./hrpsys_tools_config.py -- --host xxxx --port xxxx` for robot debugging, we recommend to use ipython")
+    parser.add_argument('--host', help='corba name server hostname')
+    parser.add_argument('--port', help='corba name server port number')
+    parser.add_argument('-i', help='interactive mode',  action='store_true')
+    parser.add_argument('-c', help='execute command',  nargs='*')
+    args, unknown = parser.parse_known_args()
+
+    if args.i: # interactive
+        sys.argv.remove('-i')
+    if args.c:
+        sys.argv.remove('-c')
+        [sys.argv.remove(a) for a in args.c] # remove command from sys.argv
+    if args.host:
+        rtm.nshost = args.host; sys.argv = [sys.argv[0]] + sys.argv[3:]
+    if args.port:
+        rtm.nsport = args.port; sys.argv = [sys.argv[0]] + sys.argv[3:]
+
+    # ipython ./hrpsys_tools_config.py -i -- --port 2809
     hcf = HrpsysConfigurator()
-    if len(sys.argv) > 2 :
+    if args.i or '__IPYTHON__' in vars(__builtins__):
+        hcf.waitForModelLoader()
+        if len(sys.argv) > 1 and not sys.argv[1].startswith('-'):
+            hcf.waitForRTCManagerAndRoboHardware(robotname=sys.argv[1])
+            sys.argv = [sys.argv[0]] + sys.argv[2:]
+        hcf.findComps()
+        print >> sys.stderr, "[hrpsys.py] #\n[hrpsys.py] # use `hcf` as robot interface, for example hcf.getJointAngles()\n[hrpsys.py] #"
+        while args.c != None:
+            print >> sys.stderr, ">>", args.c[0]
+            exec(args.c[0])
+            args.c.pop(0)
+        if not (args.i and '__IPYTHON__' in vars(__builtins__)):
+            code.interact(local=locals()) #drop in shell if invoke from python, or ipython without -i option
+    elif len(sys.argv) > 2 :
         hcf.init(sys.argv[1], sys.argv[2])
     elif len(sys.argv) > 1 :
         hcf.init(sys.argv[1])
diff --git a/hrpsys_tools/test/test-hrpsys-config.py b/hrpsys_tools/test/test-hrpsys-config.py
new file mode 100755
index 0000000..f6eab5d
--- /dev/null
+++ b/hrpsys_tools/test/test-hrpsys-config.py
@@ -0,0 +1,39 @@
+#!/usr/bin/env python
+
+PKG = 'hrpsys_tools'
+NAME = 'test-hrpsys-config'
+
+import imp  ## for rosbuild
+try:
+    imp.find_module(PKG)
+except:
+    import roslib; roslib.load_manifest(PKG)
+
+from hrpsys.hrpsys_config import *
+from hrpsys import rtm
+
+import argparse,unittest,rostest
+
+class SampleHrpsysConfigurator(HrpsysConfigurator):
+    def init(self, robotname="SampleRobot(Robot)0", url=""):
+         HrpsysConfigurator.init(self, robotname=robotname, url=url)
+
+class TestHrpsysConfigurator(unittest.TestCase):
+    def setUp(self):
+        parser = argparse.ArgumentParser(description='hrpsys command line interpreters')
+        parser.add_argument('--host', help='corba name server hostname')
+        parser.add_argument('--port', help='corba name server port number')
+        args, unknown = parser.parse_known_args()
+
+        if args.host:
+            rtm.nshost = args.host
+        if args.port:
+            rtm.nsport = args.port
+        h = SampleHrpsysConfigurator()
+
+    def test(self):
+        self.assertTrue(True,"ok")
+
+
+if __name__ == '__main__':
+    rostest.run(PKG, NAME, TestHrpsysConfigurator, sys.argv)
diff --git a/hrpsys_tools/test/test-hrpsys-config.test b/hrpsys_tools/test/test-hrpsys-config.test
new file mode 100644
index 0000000..38a2c04
--- /dev/null
+++ b/hrpsys_tools/test/test-hrpsys-config.test
@@ -0,0 +1,24 @@
+<launch>
+<!-- include file="$(find hrpsys)/test/test-hrpsys.test" / -->
+  <!-- BEGIN:common setting -->
+  <env name="LANG" value="C" />
+  <env name="ORBgiopMaxMsgSize" value="2147483648" />
+  <!-- env name="PROJECT_DIR" value="$(find hrpsys)" / -->
+  <env name="PATH" value="$(find openrtm_aist)/../../lib/openrtm_aist/bin/:$(env PATH)" />
+  <!-- END:common setting -->
+
+  <node name="modelloader" pkg="openhrp3" type="openhrp-model-loader" output="screen"/>
+  <node name="rtcd" pkg="openrtm_aist"
+  type="rtcd" args='-o "manager.modules.preload:hrpEC.so,RobotHardware.so" -o "manager.components.precreate:RobotHardware" -o "corba.nameservers:localhost:2809" -o "naming.formats:%n.rtc" -o "logger.enable:YES" -o "logger.log_level:NORMAL" -o "logger.file_name:stdout" -o "exec_cxt.periodic.rate:1000" -o "manager.shutdown_onrtcs:NO" -o "manager.is_master:YES" -o "manager.modules.load_path:$(find hrpsys)/lib" -o "example.RobotHardware.config_file:$(find hrpsys)/share/hrpsys/samples/PA10/RobotHardware.conf" -o "example.SequencePlayer.config_file:$(find hrpsys)/share/hrpsys/samples/PA10/PA10.conf" -o "example.StateHolder.config_file:$(find hrpsys)/share/hrpsys/samples/PA10/PA10.conf"'
+        output="screen"/>
+
+<!-- end of include -->
+
+  <test test-name="hrpsys_tool_config_interactive" pkg="hrpsys_tools"
+        type="hrpsys_tools_config.py" args='--host 127.0.0.1 --port 2809 -i -c "import rostest, unittest" "rostest.rosrun(\"hrpsys_tools\", \"interactive\", unittest.TestCase)" "quit()" "quit()"'
+        retry="4" />
+
+  <test test-name="configure_host_port" pkg="hrpsys_tools"
+        type="test-hrpsys-config.py" args="--host 127.0.0.1 --port 2809"
+        retry="4" />
+</launch>
diff --git a/hrpsys_tools/test/test-pa10.test b/hrpsys_tools/test/test-pa10.test
new file mode 100644
index 0000000..4972da6
--- /dev/null
+++ b/hrpsys_tools/test/test-pa10.test
@@ -0,0 +1,19 @@
+<launch>
+  <include file="$(find hrpsys_tools)/samples/pa10.launch" >
+    <arg name="GUI" default="false" />
+    <arg name="corbaport" default="2809" />
+    <!--
+        use 2809 corbaport (this is default CORBA port, but rtm-ros-robtics uses 15005 for default...) for testing without dependency on rtmlaunch.
+        if you have some troubles, please restart omniNames
+          sudo /etc/init.d/omniorb4-nameserver restart
+          sudo pkill -KILL omniNames
+          rosrun openrtm_aist rtm-naming 2809
+     -->
+  </include>
+
+  <!-- need time.sleep(1): need code that waht for all component in serialization is actually activated.... -->
+  <test test-name="hrpsys_tool_config_interactive" pkg="hrpsys_tools"
+        type="hrpsys_tools_config.py" args='--host 127.0.0.1 --port 2809 -i PA10Controller\(Robot\)0 -c "import rostest, unittest" "rostest.rosrun(\"hrpsys_tools\", \"interactive\", unittest.TestCase)" "import time" "time.sleep(5)" "hcf.setJointAngles([10,10,10,10,10,10,10,10,10], 1)" "print hcf.getJointAngles()" "quit()"'
+        retry="4" />
+
+</launch>
\ No newline at end of file
diff --git a/openrtm_ros_bridge/CHANGELOG.rst b/openrtm_ros_bridge/CHANGELOG.rst
new file mode 100644
index 0000000..9c4d761
--- /dev/null
+++ b/openrtm_ros_bridge/CHANGELOG.rst
@@ -0,0 +1,101 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package openrtm_ros_bridge
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+* openrtm_ros_bridge: (test_myservice_rosbridge.test) add retry=4
+* openrtm_ros_bridge: mv samples/test_myservice_rosbridge.* -> test/test_myservice_rosbridge.* and add test to CMakeLists.txt/catkin.cmake
+* disable openrtm_ros_bridge/rosbuil test for now
+* Wrong catkin macro (CATKIN-DEPENDS to CATKIN_DEPENDS).
+* use pkg-config to find directories
+* disable test_myservice_rosbridge.launch, is is not working right now
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+* (rtmros_common, openrtm_ros_bridge, hrpsys_ros_bridge) Cleaning and elaborating package.xml
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* unset openrtm_tools_LIBRARIES since openrtm_aist_LIBRARIES used in rtmbuild_init, use rtmbuild_PREFIX instaed of CMAKE_INSTALL_PREFIX to get rtmbuild.cmake
+* add openrtm_aist to catkin_package/DEPENDS
+* unset \*_LIBRARIES not to add library names to Config.cmake
+* fix directory structure, see Issue 188
+* fix catkin.cmake, since openrtm_aist/openhrp3/hrpsys is compiled as non-catkin package (this means catkin_make does not install <package>.pc <package>Config.cmake and use DEPENDS not CATKIN-DEPENDS)
+* fix copy idl file from openrtm-1.1/example/\*.idl
+* install rtmbuild from rtmbuild_SOURCE_DIR/CMAKE_INSTALL_DIR
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Updated all package.xml in rtmros_common metapkg (add URLs, alphabetized, cleanup, add Isaac as a maintainer to receive notice from buildfarm).
+* remove REQUIRED from pkg_check_modules: catkin compile does not find rtmbuild/openrtm_aist package in the first time
+* minior fix
+* add rostest
+* clean up catkin.cmake
+* catkinize package
+* openrtm_tools depends on openrtm_aist
+* depends rosdep is requried
+* del depends to roscpp
+* use USE_ROSBUILD to swicth rosbuild/catkin
+* move servicebridge.cmake idl2srv.py from openrtm_ros_bridge to rtmbuild
+* add depends to rtmbuild
+* fix wrong commit r4747, PROJECT_SOURCE_DIR -> openrtm_ros_bridge_PACKAGE_PATH, idl2srv.py, servicebridge.cmake
+* fix r4737,  idl2srv servicebridge.cmake
+* check if idl or idl2srv servicebridge.cmake are newer than generated files
+* rm old files if idl2srv.py or servicebridge.cmake has changed
+* change INCLUDE_DIRS from {prefix}/idl_gen/cpp/{prefix}/idl to {prefix}/idl_gen/cpp, so need to include <prefix/idl/hoge.h> instead of <hoge.h>, Issue 137
+* rtm-config is in openrtm_aist, due to split openrtm into openrtm_aist, openrtm_aist_python, rtshell, rtctree and rtsprofile, Issue 137
+* fix MyService{Provider,Consumer}Comp is under openrtm_aist, not openrtm_tools, due to split openrtm to openrtm_aist, openrtm_aist_python, opnertm_tools, rtshell, rtctree, rtsprofile, Issue 137
+* fix openrtm -> openrtm_aist, due to split openrtm to openrtm_aist, openrtm_aist_python, opnertm_tools, rtshell, rtctree, rtsprofile, Issue 137
+* fix wrong commit, r4692
+* fix wrong commit, r4692
+* add debug message
+* set HAVE_DISPLAY to false
+* add test code in python, add HAVE_DISPLAY arg for test environment
+* add clean
+* use copy_if_different
+* Memory leak on OpenRTM service all, thanks to mitu.kojima. Fixes issue 94
+* fix for openrtm-1.1
+* check timestamp to compile #41
+* Debugged convert functions for no allocbuf classes in idl2srv.py
+* Add allocbuf for CORBA dblsequence
+* back to 2011 + special case code for RTC::LightweightRTObject
+* undo change commited in r3108
+* ignore convert from RTM interface to ROS msg
+* add try/catch to call openrtm service
+* fixed index.rst and conf.py conflict problem
+* use ros node name as openrtm component name
+* update documents
+* update documents
+* add conf.py index.rst
+* remove cmake_minimum_required, which is defined in rtmbuild.cmake
+* add test_myservice_rosbridge.launch
+* fix test
+* add image for documents
+* update example and document
+* add comments in sample script
+* fix generate msg/srv from idl before rosbuild_init
+* add sample shell scripts, cmake functions moved
+* add test for SimpleService.echo
+* push down services into bridge node namespace, idl2srv.py
+* mv latest idl2srv.py
+* add openrtm_ros_bridge package, autogen service bridge component
+* Contributors: Isao Isaac Saito, Kei Okada, chen.jsk@gmail.com, gm130s@gmail.com, ik0313@gmail.com, kei.okada, kei.okada@gmail.com, manabu1118@gmail.com
diff --git a/openrtm_ros_bridge/CMakeLists.txt b/openrtm_ros_bridge/CMakeLists.txt
index 3b2a1a0..461a44e 100644
--- a/openrtm_ros_bridge/CMakeLists.txt
+++ b/openrtm_ros_bridge/CMakeLists.txt
@@ -54,5 +54,6 @@ set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_SOURCE_
 ##
 ## tests
 ##
-rosbuild_add_rostest(samples/test_myservice_rosbridge.launch)
+rosbuild_add_rostest(test/test_myservice_rosbridge.test)
+
 
diff --git a/openrtm_ros_bridge/catkin.cmake b/openrtm_ros_bridge/catkin.cmake
index fd3d177..99e3752 100644
--- a/openrtm_ros_bridge/catkin.cmake
+++ b/openrtm_ros_bridge/catkin.cmake
@@ -20,9 +20,14 @@ endif()
 
 # copy idl files from openrtm_aist
 file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/idl)
-find_package(PkgConfig)
-pkg_check_modules(openrtm_aist openrtm-aist REQUIRED)
-set(openrtm_aist_EXAMPLE_IDL_DIR ${openrtm_aist_PREFIX}/share/openrtm_aist/share/openrtm-1.1/example/)
+execute_process(COMMAND pkg-config --variable=data_prefix openrtm-aist
+  OUTPUT_VARIABLE openrtm_aist_DATA_PREFIX
+  RESULT_VARIABLE RESULT
+  OUTPUT_STRIP_TRAILING_WHITESPACE)
+if(NOT RESULT EQUAL 0)
+  message(FATAL_ERROR "fail to run pkg-config")
+endif()
+set(openrtm_aist_EXAMPLE_IDL_DIR ${openrtm_aist_DATA_PREFIX}/openrtm-1.1/example/)
 if(EXISTS ${openrtm_aist_EXAMPLE_IDL_DIR})
   file(GLOB_RECURSE _idl_files "${openrtm_aist_EXAMPLE_IDL_DIR}/*/*/*.idl") #fix me
 else()
@@ -44,7 +49,7 @@ rtmbuild_init()
 # call catkin_package, after rtmbuild_init, before rtmbuild_gen*
 catkin_package(
     DEPENDS #
-    CATKIN-DEPENDS openrtm_tools roscpp
+    CATKIN_DEPENDS openrtm_tools roscpp
     INCLUDE_DIRS # TODO include
     LIBRARIES # TODO
 )
@@ -56,8 +61,12 @@ rtmbuild_genidl()
 rtmbuild_genbridge()
 
 ##
-## tests
+## install
 ##
+install(DIRECTORY test samples DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} USE_SOURCE_PERMISSIONS)
 
-add_rostest(samples/test_myservice_rosbridge.launch)
+##
+## tests
+##
+add_rostest(test/test_myservice_rosbridge.test)
 
diff --git a/openrtm_ros_bridge/package.xml b/openrtm_ros_bridge/package.xml
index 77ca09b..44f9a29 100644
--- a/openrtm_ros_bridge/package.xml
+++ b/openrtm_ros_bridge/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>openrtm_ros_bridge</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>openrtm_ros_bridge package provides basic functionalities to bind
     two robotics framework: <a href = "http://openrtm.org/">OpenRTM</a> and ROS.<br />
     By using this package, you can write your ROS packages that communicate with your
diff --git a/openrtm_ros_bridge/samples/test_myservice_rosbridge.l b/openrtm_ros_bridge/test/test_myservice_rosbridge.l
similarity index 100%
rename from openrtm_ros_bridge/samples/test_myservice_rosbridge.l
rename to openrtm_ros_bridge/test/test_myservice_rosbridge.l
diff --git a/openrtm_ros_bridge/samples/test_myservice_rosbridge.py b/openrtm_ros_bridge/test/test_myservice_rosbridge.py
similarity index 100%
rename from openrtm_ros_bridge/samples/test_myservice_rosbridge.py
rename to openrtm_ros_bridge/test/test_myservice_rosbridge.py
diff --git a/openrtm_ros_bridge/samples/test_myservice_rosbridge.launch b/openrtm_ros_bridge/test/test_myservice_rosbridge.test
similarity index 77%
rename from openrtm_ros_bridge/samples/test_myservice_rosbridge.launch
rename to openrtm_ros_bridge/test/test_myservice_rosbridge.test
index 4ee9b86..06003b3 100644
--- a/openrtm_ros_bridge/samples/test_myservice_rosbridge.launch
+++ b/openrtm_ros_bridge/test/test_myservice_rosbridge.test
@@ -5,6 +5,7 @@
   <include file="$(find openrtm_ros_bridge)/samples/myservice_rosbridge.launch" />
 
   <test type="test_myservice_rosbridge.py" pkg="openrtm_ros_bridge"
-	time-limit="300" test-name="test_myservice_rosbridge" />
+	time-limit="300" test-name="test_myservice_rosbridge"
+        retry="4" />
 
 </launch>
\ No newline at end of file
diff --git a/openrtm_tools/CHANGELOG.rst b/openrtm_tools/CHANGELOG.rst
new file mode 100644
index 0000000..a9a7ec6
--- /dev/null
+++ b/openrtm_tools/CHANGELOG.rst
@@ -0,0 +1,77 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package openrtm_tools
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+* (rtmlaunch.py) trap SIGINT and exits with 0
+* openrtm_tools: add rosbash to depends
+* openrtm_tools : add test code to check if rtmlaunch works
+* comment out import OpenRTM_aist.RTM_IDL # for catkin, see #375
+* openrtm_tools: add rosbash to depends
+* openrtm_tools : add test code to check if rtmlaunch works test-rtmlaunch.{py,test}
+* comment out import OpenRTM_aist.RTM_IDL # for catkin, see #375
+* display output when test fails
+* fix PATH/PYTHONPATH for rosbuild/catkin
+* add test code for openrtm_tools (rtshell-setup.sh)
+* fix rtshell-setup.sh to support catkin environment
+* add link to more useful information, suggested by Isaac
+* remove debug code
+* display more verbose information of weird connection error
+* add rosdep hrpsys/openrtm_aist to fake rosdep
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+* support if/unless roslaunch Issue 253
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* fix comment for new directory structure
+* enable set alias on non-interactive shell
+* unset \*_LIBRARIES not to add library names to Config.cmake
+* add rtmtest.py from rtmlaunch in order to add rtmtest, add alias rtmtest to rtshell-setup.sh
+* add alias to rtmlaunch
+* fix corba port to 15005, see Issue 141
+* fix catkin.cmake for installed project
+* add import OpenRTM_aist.RTM_IDL, for catkin
+* fix not using sub shell, [#179]
+* fix catkin.cmake, since openrtm_aist/openhrp3/hrpsys is compiled as non-catkin package (this means catkin_make does not install <package>.pc <package>Config.cmake and use DEPENDS not CATKIN-DEPENDS)
+* use localhost:5005
+* switch completion settings of rtmlaunch by CATKIN_SHELL (for zsh users)
+* set default corbaport to 5005, Fixes Issue 141
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Updated all package.xml in rtmros_common metapkg (add URLs, alphabetized, cleanup, add Isaac as a maintainer to receive notice from buildfarm).
+* openrtm_tools depends on openrtm_aist, openrtm_aist_python, rtshell
+* catkinze package, add rtshell to build_depend
+* revert wrong commit : add rtshell as run_depend
+* add rtshell as run_depend
+* connect, then activate
+* add path to rtshell, rtctree, rtsprofile, Issue 137
+* fix install rtshell under /bin, /src, see Issue 146
+* load manifest(openrtm_tools) Issue 137
+* del wrong comit
+* copy from openrtm/script, due to split openrtm to openrtm_aist, openrtm_aist_python, opnertm_tools, rtshell, rtctree, rtsprofile, Issue 137
+* copy from openrtm/script, due to split openrtm to openrtm_aist, openrtm_aist_python, opnertm_tools, rtshell, rtctree, rtsprofile, Issue 137
+* add rtshell-setup.sh
+* split openrtm to openrtm_aist, openrtm_aist_python, opnertm_tools, rtshell, rtctree, rtsprofile, Issue 137
+* Contributors: Kei Okada, gm130s@gmail.com, kei.okada, nakaokat@gmail.com, youhei@jsk.imi.i.u-tokyo.ac.jp
diff --git a/openrtm_tools/CMakeLists.txt b/openrtm_tools/CMakeLists.txt
index 797d193..9115e8b 100644
--- a/openrtm_tools/CMakeLists.txt
+++ b/openrtm_tools/CMakeLists.txt
@@ -32,3 +32,6 @@ set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
 #rosbuild_link_boost(${PROJECT_NAME} thread)
 #rosbuild_add_executable(example examples/example.cpp)
 #target_link_libraries(example ${PROJECT_NAME})
+
+rosbuild_add_rostest(test/test-openrtm-tools.test)
+rosbuild_add_rostest(test/test-rtmlaunch.test)
diff --git a/openrtm_tools/catkin.cmake b/openrtm_tools/catkin.cmake
index 9dc53cf..dac09f5 100644
--- a/openrtm_tools/catkin.cmake
+++ b/openrtm_tools/catkin.cmake
@@ -4,7 +4,7 @@ project(openrtm_tools)
 ## Find catkin macros and libraries
 ## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
 ## is used, also find other catkin packages
-find_package(catkin REQUIRED COMPONENTS openrtm_aist_python rtshell)
+find_package(catkin REQUIRED COMPONENTS openrtm_aist_python rtshell rostest)
 
 ## System dependencies are found with CMake's conventions
 # find_package(Boost REQUIRED COMPONENTS system)
@@ -120,7 +120,7 @@ include_directories(
 #   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
 # )
 
-install(DIRECTORY scripts DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} USE_SOURCE_PERMISSIONS PATTERN ".svn" EXCLUDE)
+install(DIRECTORY scripts test DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} USE_SOURCE_PERMISSIONS PATTERN ".svn" EXCLUDE)
 
 #############
 ## Testing ##
@@ -134,3 +134,8 @@ install(DIRECTORY scripts DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION} USE_SO
 
 ## Add folders to be run by python nosetests
 # catkin_add_nosetests(test)
+
+
+add_rostest(test/test-openrtm-tools.test)
+add_rostest(test/test-rtmlaunch.test)
+
diff --git a/openrtm_tools/manifest.xml b/openrtm_tools/manifest.xml
index 04749fd..750ac22 100644
--- a/openrtm_tools/manifest.xml
+++ b/openrtm_tools/manifest.xml
@@ -14,6 +14,14 @@
 
   <depend package="rtshell" />
 
+  <rosdep name="openrtm_aist" />
+  <rosdep name="openrtm_aist_python" />
+
+  <rosdep name="rtshell" />
+  <rosdep name="rosbash" />
+
+  <rosdep name="rostest" />
+
   <export>
   </export>
 
diff --git a/openrtm_tools/package.xml b/openrtm_tools/package.xml
index 81b40ce..44636ed 100644
--- a/openrtm_tools/package.xml
+++ b/openrtm_tools/package.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <package>
   <name>openrtm_tools</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>The openrtm_tools package</description>
 
   <maintainer email="k-okada@jsk.t.u-tokyo.ac.jp">Kei Okada</maintainer>
@@ -17,10 +17,13 @@
   <build_depend>openrtm_aist</build_depend>
   <build_depend>openrtm_aist_python</build_depend>
   <build_depend>rtshell</build_depend>
+  <build_depend>rostest</build_depend>
+  <build_depend>rosbash</build_depend>
 
   <run_depend>openrtm_aist</run_depend>
   <run_depend>openrtm_aist_python</run_depend>
   <run_depend>rtshell</run_depend>
+  <run_depend>rosbash</run_depend>
 
   <export/>
 </package>
\ No newline at end of file
diff --git a/openrtm_tools/scripts/rtmlaunch.py b/openrtm_tools/scripts/rtmlaunch.py
index bd391e0..71225d1 100755
--- a/openrtm_tools/scripts/rtmlaunch.py
+++ b/openrtm_tools/scripts/rtmlaunch.py
@@ -3,7 +3,6 @@
 import roslib
 roslib.load_manifest('openrtm_tools')
 
-import OpenRTM_aist.RTM_IDL # for catkin
 import sys
 import os
 import time
@@ -112,8 +111,19 @@ def rtconnect(nameserver, tags):
             print >>sys.stderr, "[rtmlaunch]           with",options
             try :
                 rtcon.connect_ports(source_path, source_full_path, dest_path, dest_full_path, options, tree=None)
-            except Exception, e: # openrtm 1.1.0
-                rtcon.connect_ports([(source_path,source_full_path), (dest_path, dest_full_path)], options, tree=None)
+            except Exception, e_1_1_0: # openrtm 1.1.0
+                try:
+                    rtcon.connect_ports([(source_path,source_full_path), (dest_path, dest_full_path)], options, tree=None)
+                except Exception, e_1_0_0: # openrtm 1.0.0
+                    print >>sys.stderr, '\033[31m[rtmlaunch] {0} did not work on both OpenRTM 1.0.0 and 1.1.0'.format(os.path.basename(sys.argv[1])),'\033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch]    OpenRTM 1.0.0 {0}'.format(e_1_0_0),'\033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch]    OpenRTM 1.1.0 {0}'.format(e_1_1_0),'\033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch]  This is very weird situation, Please check your network\033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch] configuration with `ifconfig` on both robot and client side. \033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch]  Having multiple network interface sometimes causes problem, \033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch] please see FAQ site http://www.openrtm.org/OpenRTM-aist/html/FAQ2FE38388E383A9E38396E383ABE382B7E383A5E383BCE38386E382A3E383B3E382B0.html#f2bc375d\033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch]            Issue related to this https://github.com/start-jsk/rtmros_hironx/issues/33\033[0m'
+                    print >>sys.stderr, '\033[31m[rtmlaunch]            ~/.ros/log may contains usefully informations\033[0m'
         except Exception, e:
             print >>sys.stderr, '\033[31m[rtmlaunch] {0}: {1}'.format(os.path.basename(sys.argv[1]), e),'\033[0m'
     return 0
@@ -204,7 +214,14 @@ def get_flag_from_argv(arg):
         if arg in a: # If "USE_WALKING" is in argv
             return True if 'true' in a.split("=")[1] else False
 
+import signal
+def signal_handler(signum, frame):
+    sigdict = dict((k, v) for v, k in signal.__dict__.iteritems() if v.startswith('SIG'))
+    print >>sys.stderr, "\033[33m[rtmlaunch] Catch signal %r, exitting...\033[0m"%(sigdict[signum])
+    sys.exit(0)
+
 if __name__ == '__main__':
+    signal.signal(signal.SIGINT, signal_handler)
     main()
 
 
diff --git a/openrtm_tools/scripts/rtshell-setup.sh b/openrtm_tools/scripts/rtshell-setup.sh
index 8729af0..af70f6d 100755
--- a/openrtm_tools/scripts/rtshell-setup.sh
+++ b/openrtm_tools/scripts/rtshell-setup.sh
@@ -1,9 +1,20 @@
 #!/bin/bash
 
-export PATH=`rospack find openrtm_aist`/bin:$PATH
-export PATH=`rospack find rtshell`/bin:$PATH
-_PYTHONVER=`python -c 'import sys; print "python%s"%sys.version[:3]'`
-export PYTHONPATH=`rospack find openrtm_aist_python`/lib/${_PYTHONVER}/site-packages:`rospack find rtshell`/lib/${_PYTHONVER}/site-packages:`rospack find rtctree`/lib/${_PYTHONVER}/site-packages:`rospack find rtsprofile`/lib/${_PYTHONVER}/site-packages:$PYTHONPATH
+if [ -e `rospack find rtshell`/bin ] ; then # if rosbuild
+    _PYTHONVER=`python -c 'import sys; print "python%s"%sys.version[:3]'`
+    if [ -e /etc/debian_version ]; then
+	_PYTHON_DIR=lib/${_PYTHONVER}/dist-packages
+    else
+	_PYTHON_DIR=lib/${_PYTHONVER}/site-packages
+    fi
+    # export PATH=`rospack find openrtm_aist`/bin:$PATH
+    # export PYTHONPATH=`rospack find openrtm_aist_python`/${_PYTHON_DIR}:$PYTHONPATH
+    export PATH=`rospack find rtshell`/bin:$PATH
+    export PYTHONPATH=`rospack find rtshell`/${_PYTHON_DIR}:`rospack find rtctree`/${_PYTHON_DIR}:`rospack find rtsprofile`/${_PYTHON_DIR}:$PYTHONPATH
+else
+    export PATH=`pkg-config rtshell --variable=prefix`/lib/rtshell:$PATH
+fi
+
 if [ -f `rospack find rtshell`/share/rtshell/shell_support ]; then
     source `rospack find rtshell`/share/rtshell/shell_support
 else
diff --git a/openrtm_tools/test/test-openrtm-tools.test b/openrtm_tools/test/test-openrtm-tools.test
new file mode 100644
index 0000000..b1620cb
--- /dev/null
+++ b/openrtm_tools/test/test-openrtm-tools.test
@@ -0,0 +1,3 @@
+<launch>
+  <test test-name="rtshell_setup" pkg="openrtm_tools" type="test-rtshell-setup.py" />
+</launch>
\ No newline at end of file
diff --git a/openrtm_tools/test/test-rtmlaunch.py b/openrtm_tools/test/test-rtmlaunch.py
new file mode 100755
index 0000000..57438b0
--- /dev/null
+++ b/openrtm_tools/test/test-rtmlaunch.py
@@ -0,0 +1,135 @@
+#!/usr/bin/env python
+
+PKG = 'openrtm_tools'
+NAME = 'test-rtmlaunch'
+
+import imp  ## for rosbuild
+try:
+    imp.find_module(PKG)
+except:
+    import roslib; roslib.load_manifest(PKG)
+
+import unittest, os, sys, time
+import subprocess
+from subprocess import call, check_output, Popen, PIPE, STDOUT
+
+import rtctree.tree
+
+class TestRtmLaunch(unittest.TestCase):
+
+    # check if MyServiceProviderComp and MyServiceConsumerComp is activated and connected
+    def test_provider_activated(self):
+        provider = None
+        count = 0
+        while count < 20 :
+            try:
+                tree = rtctree.tree.RTCTree(servers='localhost:2809')
+                provider = tree.get_node(['/', 'localhost:2809','MyServiceProvider0.rtc'])
+                print >>sys.stderr, "Provier : ", provider, provider.get_state_string()
+                if provider.state==rtctree.component.Component.ACTIVE:
+                    break
+            except:
+                pass
+            time.sleep(1)
+            count += 1
+        self.assertTrue(provider.state==rtctree.component.Component.ACTIVE, "State of Provider is %s"%(provider.state_string))
+
+    def test_consumer_activated(self):
+        count = 0
+        while count < 20 :
+            try:
+                tree = rtctree.tree.RTCTree(servers='localhost:2809')
+                consumer = tree.get_node(['/', 'localhost:2809','MyServiceConsumer0.rtc'])
+                print >>sys.stderr, "Consumer : ", consumer, consumer.get_state_string()
+                if consumer.state==rtctree.component.Component.ACTIVE:
+                    break
+            except:
+                pass
+            time.sleep(1)
+            count += 1
+        self.assertTrue(consumer.state==rtctree.component.Component.ACTIVE, "State of Consumer is %s"%(consumer.state_string))
+
+    def test_provider_and_consumer_connected(self):
+        count = 0
+        while count < 20 :
+            try:
+                tree = rtctree.tree.RTCTree(servers='localhost:2809')
+                provider = tree.get_node(['/', 'localhost:2809','MyServiceProvider0.rtc'])
+                consumer = tree.get_node(['/', 'localhost:2809','MyServiceConsumer0.rtc'])
+                provider_port = provider.get_port_by_name("MyService")
+                consumer_port = consumer.get_port_by_name("MyService")
+                connection = provider_port.get_connection_by_dest(consumer_port)
+                print >>sys.stderr, "Connection : ", connection.properties
+                break
+            except:
+                pass
+            time.sleep(1)
+            count += 1
+        self.assertTrue(connection.properties['port.port_type']=='CorbaPort')
+        self.assertTrue(connection.properties['dataport.subscription_type']=='flush')
+
+    # check if SequenceInComponent0.rtc and SequenceOutComponent0.rtc ans activated and connected
+    def test_seqin_activated(self):
+        count = 0
+        while count < 20 :
+            try:
+                tree = rtctree.tree.RTCTree(servers='localhost:2809')
+                seqin = tree.get_node(['/', 'localhost:2809','SequenceInComponent0.rtc'])
+                print >>sys.stderr, "SeqIn  : ", seqin, seqin.get_state_string()
+                if seqin.state==rtctree.component.Component.ACTIVE:
+                    break
+            except:
+                pass
+            time.sleep(1)
+            count += 1
+        self.assertTrue(seqin.state==rtctree.component.Component.ACTIVE, "State of SeqIn is %s"%(seqin.state_string))
+
+    def test_seqout_activated(self):
+        count = 0
+        while count < 20 :
+            try:
+                tree = rtctree.tree.RTCTree(servers='localhost:2809')
+                seqout = tree.get_node(['/', 'localhost:2809','SequenceOutComponent0.rtc'])
+                print >>sys.stderr, "SeqOut : ", seqout, seqout.get_state_string()
+                if seqout.state==rtctree.component.Component.ACTIVE:
+                    break
+            except:
+                pass
+            time.sleep(1)
+            count += 1
+        self.assertTrue(seqout.state==rtctree.component.Component.ACTIVE, "State of SeqOut is %s"%(seqout.state_string))
+
+    def test_seqin_and_seqout_connected(self):
+        count = 0
+        while count < 20 :
+            try:
+                tree = rtctree.tree.RTCTree(servers='localhost:2809')
+                seqin  = tree.get_node(['/', 'localhost:2809','SequenceInComponent0.rtc'])
+                seqout = tree.get_node(['/', 'localhost:2809','SequenceInComponent0.rtc'])
+                seqin_port1  = seqin.get_port_by_name("Float")
+                seqin_port2  = seqin.get_port_by_name("FloatSeq")
+                seqout_port1 = seqout.get_port_by_name("Float")
+                seqout_port2 = seqout.get_port_by_name("FloatSeq")
+                connection1 = seqin_port1.get_connection_by_dest(seqout_port1)
+                connection2 = seqin_port2.get_connection_by_dest(seqout_port2)
+                print >>sys.stderr, "Connection : ", connection1.properties
+                print >>sys.stderr, "Connection : ", connection2.properties
+                break
+            except:
+                pass
+            time.sleep(1)
+            count += 1
+
+        self.assertTrue(connection1.properties['dataport.data_type']=='IDL:RTC/TimedFloat:1.0')
+        self.assertTrue(connection1.properties['dataport.subscription_type']=='new') # Float
+        self.assertTrue(connection1.properties['dataport.publisher.push_policy']=='all')
+
+        self.assertTrue(connection2.properties['dataport.data_type']=='IDL:RTC/TimedFloatSeq:1.0')
+        self.assertTrue(connection2.properties['dataport.subscription_type']=='flush') # FloatSeq
+        self.assertTrue(connection2.properties.get('dataport.publisher.push_policy')==None)
+
+
+#unittest.main()
+if __name__ == '__main__':
+    import rostest
+    rostest.run(PKG, NAME, TestRtmLaunch, sys.argv)
diff --git a/openrtm_tools/test/test-rtmlaunch.test b/openrtm_tools/test/test-rtmlaunch.test
new file mode 100644
index 0000000..4e8f614
--- /dev/null
+++ b/openrtm_tools/test/test-rtmlaunch.test
@@ -0,0 +1,30 @@
+<launch>
+  <arg name="nameserver" default="localhost" />
+  <env name="RTCTREE_NAMESERVERS" value="$(arg nameserver)" />
+  <arg name="openrtm_args" value='-o "corba.nameservers:$(arg nameserver):2809" -o "naming.formats:%n.rtc" -o "logger.file_name:/tmp/rtc%p.log" ' />
+
+  <!-- RTC Service Provider sample -->
+  <node name="provider" pkg="openrtm_aist" type="MyServiceProviderComp"	args='$(arg openrtm_args)' />
+  <!-- RTC Service Consumet sample -->
+  <node name="consumer" pkg="openrtm_aist" type="MyServiceConsumerComp"	args='$(arg openrtm_args)' />
+
+  <!-- RTC SeqIn/SeqOut sample -->
+  <node name="seqin"  pkg="openrtm_aist" type="SeqInComp"	args='$(arg openrtm_args)' />
+  <node name="seqout" pkg="openrtm_aist" type="SeqOutComp"	args='$(arg openrtm_args)' />
+
+  <!-- BEGIN:openrtm connection -->
+  <node name="rtmlaunch_py" pkg="openrtm_tools" type="rtmlaunch.py"
+        args="$(find openrtm_tools)/test/test-rtmlaunch.test" />
+  <rtactivate component="MyServiceProvider0.rtc" />
+  <rtactivate component="MyServiceConsumer0.rtc" />
+  <rtconnect from="MyServiceProvider0.rtc:MyService"
+	     to="MyServiceConsumer0.rtc:MyService"/>
+
+  <rtactivate component="SequenceInComponent0.rtc" />
+  <rtactivate component="SequenceOutComponent0.rtc" />
+  <rtconnect from="SequenceInComponent0.rtc:Float"     to="SequenceOutComponent0.rtc:Float"    subscription_type="new"/>
+  <rtconnect from="SequenceInComponent0.rtc:FloatSeq"  to="SequenceOutComponent0.rtc:FloatSeq" subscription_type="flush"/>
+  <!-- END:openrtm connection -->
+
+  <test test-name="rtmlaunch" pkg="openrtm_tools" type="test-rtmlaunch.py" />
+</launch>
\ No newline at end of file
diff --git a/openrtm_tools/test/test-rtshell-setup.py b/openrtm_tools/test/test-rtshell-setup.py
new file mode 100755
index 0000000..19a06c9
--- /dev/null
+++ b/openrtm_tools/test/test-rtshell-setup.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python
+
+PKG = 'openrtm_tools'
+NAME = 'test-rthsell-setup'
+
+import unittest, os, sys
+import subprocess
+from subprocess import call, check_output, Popen, PIPE, STDOUT
+
+class TestOpenrtmTools(unittest.TestCase):
+
+    def test_rtshell_setup(self):
+        pkg_path = check_output("rospack find openrtm_tools", shell=True).rstrip()
+        script = os.path.join(pkg_path, "scripts/rtshell-setup.sh")
+        self.assertTrue(os.path.exists(script))
+        try:
+            check_output("bash -c 'source %s; RTCTREE_NAMESERVERS=localhost:2809 rtls'"%(script), shell=True, stderr=subprocess.STDOUT)
+        except subprocess.CalledProcessError, (e):
+            self.assertTrue(False, 'subprocess.CalledProcessError: cmd:%s returncode:%s output:%s' % (e.cmd, e.returncode, e.output))
+        self.assertTrue(True) # ok rtls works
+
+#unittest.main()
+if __name__ == '__main__':
+    import rostest
+    rostest.run(PKG, NAME, TestOpenrtmTools, sys.argv)
diff --git a/rosnode_rtc/CHANGELOG.rst b/rosnode_rtc/CHANGELOG.rst
new file mode 100644
index 0000000..5798f02
--- /dev/null
+++ b/rosnode_rtc/CHANGELOG.rst
@@ -0,0 +1,72 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package rosnode_rtc
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+* (package.xml) move rostopic from test_depend to build_depend
+* add rosdep roscpp_tutorials
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+* (hrpsys_tools, rosnode_rtc, rtmbuild) maintainer name adjusted to the one used in other places
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+* remove move_base_stage_tutorial since stage is not catkinzed in groovy
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Updated all package.xml in rtmros_common metapkg (add URLs, alphabetized, cleanup, add Isaac as a maintainer to receive notice from buildfarm).
+* catkinize rosnode_rtc
+* inport_1.1.0 as default
+* update to new openrtm_aist directory structure
+* depends to openrtm_tools
+* fix for groovy, this may breaks electric
+* update for openrtm 1.1
+* fixed index.rst and conf.py conflict problem
+* add conf.py index.rst
+* more verbose for rosnode_rtc example
+* add a image in launchdocument
+* update navigation.png
+* add desktop icons
+* add cut to remove space fro the rospack export ...
+* add tkjoy_comp.sh  tkjoy_sample.launch
+* fix layout
+* quote backslash
+* add 2 images, node-rtc detaport figure
+* add newline in the end of rosdoc.yaml, and jsk_totoks depend
+* changed sample launch to wait creating dataport before rtinject and rtprint
+* add rosdoc.yaml
+* add ignore_unbound mode, add documents and images
+* added switch option to ignore unbounded message type
+* changed to remove prefix ROS
+* add parameter for rosnode wrapper
+* add sleep after compiling idl
+* add sample for connecting TkJoyStick
+* add TkJoyStick -> CommandVel bridge sample
+* added sample for OpenRTM-Python1.1.0, rtshell should be patched
+* fixed the error check for creating ports
+* fixed the determination of rtm data object class
+* add simple usage in stage_sample.launch, add info for failure of port creation
+* fixed the stage sample for send goal
+* changed package name dataport_ros_bridge -> rosnode_rtc
+* Contributors: Kei Okada, chen.jsk@gmail.com, gm130s@gmail.com, kei.okada, kei.okada@gmail.com, manabu1118, manabu1118@gmail.com
diff --git a/rosnode_rtc/manifest.xml b/rosnode_rtc/manifest.xml
index 8f0f13d..07474cb 100644
--- a/rosnode_rtc/manifest.xml
+++ b/rosnode_rtc/manifest.xml
@@ -20,8 +20,9 @@
   <depend package="openrtm_tools" />
 
   <!-- for samples -->
+  <rosdep name="roscpp_tutorials" />
   <depend package="roscpp_tutorials" />
-  <depend package="move_base_stage_tutorial" />
+  <!-- depend package="move_base_stage_tutorial" / -->
 
 </package>
 
diff --git a/rosnode_rtc/package.xml b/rosnode_rtc/package.xml
index 1af4720..8ad0368 100644
--- a/rosnode_rtc/package.xml
+++ b/rosnode_rtc/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rosnode_rtc</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>
      This package gives transparency between RTM and ROS.
 
@@ -19,13 +19,13 @@
 
   <buildtool_depend>catkin</buildtool_depend>
   <build_depend>openrtm_tools</build_depend>
+  <build_depend>rostopic</build_depend>
+  <build_depend>roscpp_tutorials</build_depend>
+  <build_depend>rospy</build_depend>
 
   <run_depend>openrtm_tools</run_depend>
 
   <!-- test_depend>move_base_stage_tutorial</test_depend -->
-  <test_depend>roscpp_tutorials</test_depend>
-  <test_depend>rospy</test_depend>
-  <test_depend>rostopic</test_depend>
 
   <export>
 
diff --git a/rtmbuild/CHANGELOG.rst b/rtmbuild/CHANGELOG.rst
new file mode 100644
index 0000000..904067c
--- /dev/null
+++ b/rtmbuild/CHANGELOG.rst
@@ -0,0 +1,149 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package rtmbuild
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+* (rtmbuild.cmake, idl2srv.py) fix for rtmbuild/deb environment
+* (rtmbuild.cmake) display variables on both rtmbuild and cmake
+* (rtmbuild.cmake) add find_package(PkgConfig)
+* Wrong catkin macro (CATKIN-DEPENDS to CATKIN_DEPENDS).
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+* (hrpsys_tools, rosnode_rtc, rtmbuild) maintainer name adjusted to the one used in other places
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+* fix typo: add cmake_modules to depends
+* add cmake_modules to depends
+* add cmake_modules to build/run depends
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+* do not copmpile ild file parallely, hope this fixxes Issue 238
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+* rename _include_dirs -> _servicebridge_include_dirs
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* set output_python_dir to // for catkin
+* fix typo and debug code for catkin
+* fix : rosbuild must be called after generatng msg/srv file from idl
+* add debug message
+* revert r5463, which is not effective
+* add dependencies rospack_genmsg, rospack_gensrv to rtmbuild_add_{executable,librariey}
+* fix debug message
+* invoke rosbuild_init before rtmbuild_genbridge_init so to set PACKAGE_NAME
+* add openrtm_aist_LIBRARIES to target_link_libraries
+* set package-name for idl2srv.py
+* fix openhrp3.1 is not required for rtmbuild, that's optional
+* add run_depends to message_generation and rtmbuild.cmake requires message_generation
+* use openrtm_aist_{INCLUDE_DIRS,LIBRARY_DIRS}
+* fix typo
+* fix rtmbuild.cmake for catkin
+* remove debug code : clean up cmake dependency
+* celan up cmake dependency
+* add dependencies from rtmbulid_PROJECT_NAME_genbridge -> rtmbuild_PROJECT_NAME_genidl
+* fix typo FTRUE -> TRUE
+* use use_catkin variable to check if catkin compiled
+* check if CATKIN_BUILD_BINARY_PACKAGE for build
+* add omniorb to build_depend
+* add pkg-config to depend
+* fix set pkg_dir rtmbuild_init
+* check if idl2srv fails
+* preserve directory permissions for install script/ directory
+* add openrtm_aist_pkg_dir to PATH
+* use message instead of message_warn
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Updated all package.xml in rtmros_common metapkg (add URLs, alphabetized, cleanup, add Isaac as a maintainer to receive notice from buildfarm).
+* remove rosun process from catkin/rtmbuil
+* create idl_gen/{cpp,lib} direcotry for catkin_package
+* fix _ ->  catkin does not uses OPENRTM_INCLUDE_DIRS/OPENHRP_LIBRARY_DIRS/OPENRTM_LIBRARY_DIRS/OPENHRP_LIBRARY_DIRS
+* use _generate_messages_cpp
+* use PROJECT_NAME instead of _project and _prefix
+* rtmbulid_genidl : checks if user already called add_message_files and append the information, use PROJECT_NAME instaed of _project
+* pkg_check_modles could not find catkin package on compile time
+* add depends from exported targets to exe
+* change target name rtmbuild_genidl/rtmbuild_genbridge -> rtmbuild__genidl/rtmbuild__genbridge
+* do not need link_directories
+* add install, depends ROSBridge.cpp to generate_message_cpp
+* support CATKIN
+* add message_generation on depends
+* use _rtmbuild_pkg_dir instead of rtmbuild_PACKAGE_PATH
+* fix for catkin
+* update catkin.cmake
+* add omniorb, blas, lapack to run_depend
+* use USE_ROSBUILD
+* _rosbuild->message, remove rosrun
+* move servicebridge.cmake idl2srv.py from openrtm_ros_bridge to rtmbuild
+* remove debug message
+* change INCLUDE_DIRS from {prefix}/idl_gen/cpp/{prefix}/idl to {prefix}/idl_gen/cpp, so need to include <prefix/idl/hoge.h> instead of <hoge.h>, Issue 137
+* openhrp3.1.pc requires blas and lapack Issue 145
+* fix openrtm -> openrtm_aist, due to split openrtm to openrtm_aist, openrtm_aist_python, opnertm_tools, rtshell, rtctree, rtsprofile, Issue 137
+* catkinize package : add catkin.cmake and package.xml
+* rtm-skelwrapper does not overwrite existing files that breaks makefile dependency, so remove generated file before rtm-skelwrapper. add depends on stub.h and skel.h
+* fix for catkin packages Fixes Issue 78
+* update manifest for fuerte
+* add current PKG_CONFIG_PATH
+* add sample shell scripts, cmake functions moved
+* add ROSBUILD_GENERATED_{MSG/SRV}_FILES in rtmbuild_genbridge
+* moved idl2srv.py to openrtm_ros_bridge package
+* do not rm idl file
+* removing generated file in idl2srv.py causes deleting necessary files, when the file is shared by another idl files. so do not remove the file in idl2srv.py, remove the generated file from rtmbuild.cmake. also we generate files under /tmp/idl2srv/<project> since different project may share same idl file
+* put generated code under src -> src_gen
+* do not remove tmpdir for parallel make
+* check for duplicate output rule that causes error
+* update to support rtmbuild_genbridge, see fmk_ros_bridge and hrpsys for best practice
+* fixed the code to get rtc default idl directory
+* try to add a library path, copied from omniild main program
+* add try-catch block for _omniidl.compile newer version
+* added dataport_ros_bridge package, which convert ROS/topic -> RTM/dataport
+* added rtm-ros data port converter module, rtmros-data-bridge.py
+* use rtm-config --cflags to get openrtm include path
+* use rtm-config --cflags to get -I flags for genidl
+* comment out adding /opt/grx to PKG_CONFIG_PATH
+* use /opt/grx/lib's pkgconfig if exist
+* add libomniorb4-dev and rosdep from rtmbuild
+* changed to not generate unused msgs in Operations
+* added StringMultiArray, ignore attributes in interface
+* add namespace of msg/srv
+* change to use omniidl_be.cxx.types.basic_map for c++ builtin types
+* add type conversion code for 32/64bit environment
+* add multiarray type for multi-dimensional sequence/array
+* parameterize interface name of service, (port_name), and small fixes
+* use static_cast to convert int <=> enum, in idl2srv.py
+* update idl2srv.py to convert array type in idl / boost::array in ROS
+* fix idl2srv.py to convert struct with seq/struct member
+* move idl2srv.py under scripts directory, according to http://www.ros.org/wiki/Packages#Common_Files_and_Directories
+* update idl2srv to output convert functions only needed in the srvs
+* update idl2srv.py but not implemented yet
+* fix enum type mapping in 32bit OS
+* add idl2srv.py in rtmbuild, and add cmake macros for use it
+* fix dependency
+* fix to use rtm-config under openrtm directory
+* use use compiled openrtm-c++ and openrtm-python
+* add python idl compile script
+* use ${${_idl}_depends} to depends .hh on other .hh, we want to look for automatic generation
+* add OPENHRP_PRIVATE_LIBRARIES for compiling idl files in openhrp3 package
+* add -I to idl_gen/cpp and idl_gen/cpp/{package}/idl, add rtmbuild_add_library
+* add openinvent/ from http://www.openrtp.jp/INVENT/
+* add current directory to idl_dirs, inlcude_dirs and library_dirs
+* remove REQUIRED for openhrp3.1
+* rtmbuild_add_executable automatically add all stub and skel libraries
+* clean up
+* add rtmbuild
+* Contributors: Isao Isaac Saito, Kei Okada, gm130s@gmail.com, kei.okada, kei.okada@gmail.com, manabu1118, manabu1118@gmail.com, notheworld@gmail.com
diff --git a/rtmbuild/catkin.cmake b/rtmbuild/catkin.cmake
index 5055a66..ce40379 100644
--- a/rtmbuild/catkin.cmake
+++ b/rtmbuild/catkin.cmake
@@ -66,7 +66,7 @@ set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
 ## DEPENDS: system dependencies of this project that dependent projects also need
 catkin_package(
     DEPENDS omniorb # TODO libblas-dev liblapack-dev
-    CATKIN-DEPENDS  message_generation std_msgs # TODO
+    CATKIN_DEPENDS  message_generation std_msgs # TODO
     INCLUDE_DIRS # TODO include
     LIBRARIES # TODO
 )
diff --git a/rtmbuild/cmake/rtmbuild.cmake b/rtmbuild/cmake/rtmbuild.cmake
index 5c2ac14..f9a1c8c 100644
--- a/rtmbuild/cmake/rtmbuild.cmake
+++ b/rtmbuild/cmake/rtmbuild.cmake
@@ -146,9 +146,6 @@ macro(rtmbuild_init)
     pkg_check_modules(openhrp3 openhrp3.1)
     set(_openhrp3_pkg_dir ${openhrp3_PREFIX}/share/openhrp3)
     message("[rtmbuild] CATKIN compile : set pkg_dirs")
-    message("[rtmbuild] _rtmbuild_pkg_dir -> ${_rtmbuild_pkg_dir}")
-    message("[rtmbuild] _openrtm_aist_pkg_dir -> ${_openrtm_aist_pkg_dir}")
-    message("[rtmbuild] _openhrp3_pkg_dir -> ${_openhrp3_pkg_dir}")
     message("[rtmbuild] openrtm_aist_INCLUDE_DIRS -> ${openrtm_aist_INCLUDE_DIRS}")
     message("[rtmbuild] openrtm_aist_LIBRARIES    -> ${openrtm_aist_LIBRARIES}")
     message("[rtmbuild] openhrp3_INCLUDE_DIRS -> ${openhrp3_INCLUDE_DIRS}")
@@ -172,9 +169,14 @@ macro(rtmbuild_init)
     include($ENV{ROS_ROOT}/core/rosbuild/FindPkgConfig.cmake)
     execute_process(COMMAND rospack find rtmbuild OUTPUT_VARIABLE _rtmbuild_pkg_dir OUTPUT_STRIP_TRAILING_WHITESPACE)
     execute_process(COMMAND rospack find openrtm_aist OUTPUT_VARIABLE _openrtm_aist_pkg_dir OUTPUT_STRIP_TRAILING_WHITESPACE)
+    if (NOT EXISTS "${_openrtm_aist_pkg_dir}/bin")
+      find_package(openrtm_aist)
+      set(_openrtm_aist_pkg_dir ${openrtm_aist_PREFIX}/lib/openrtm_aist)
+    endif()
     execute_process(COMMAND rospack find openhrp3 OUTPUT_VARIABLE _openhrp3_pkg_dir OUTPUT_STRIP_TRAILING_WHITESPACE)
     set(ENV{PKG_CONFIG_PATH} "${_openhrp3_pkg_dir}/lib/pkgconfig:${_openrtm_aist_pkg_dir}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
     #set(ENV{PKG_CONFIG_PATH} "${_openhrp3_pkg_dir}/lib/pkgconfig:/opt/grx/lib/pkgconfig")
+    find_package(PkgConfig)
     pkg_check_modules(OPENRTM REQUIRED openrtm-aist)
     pkg_check_modules(OPENHRP openhrp3.1)
   endif()
@@ -183,6 +185,9 @@ macro(rtmbuild_init)
   message("[rtmbuild] OPENHRP_INCLUDE_DIRS: ${OPENHRP_INCLUDE_DIRS}")
   message("[rtmbuild] OPENRTM_LIBRARY_DIRS: ${OPENRTM_LIBRARY_DIRS}")
   message("[rtmbuild] OPENHRP_LIBRARY_DIRS: ${OPENHRP_LIBRARY_DIRS}")
+  message("[rtmbuild]     _rtmbuild_pkg_dir -> ${_rtmbuild_pkg_dir}")
+  message("[rtmbuild] _openrtm_aist_pkg_dir -> ${_openrtm_aist_pkg_dir}")
+  message("[rtmbuild]     _openhrp3_pkg_dir -> ${_openhrp3_pkg_dir}")
 
   message("[rtmbuild] Building package ${CMAKE_SOURCE_DIR}")
 
diff --git a/rtmbuild/package.xml b/rtmbuild/package.xml
index 52c2882..1ecf01e 100644
--- a/rtmbuild/package.xml
+++ b/rtmbuild/package.xml
@@ -1,6 +1,6 @@
 <package>
   <name>rtmbuild</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>Build scripts for OpenRTM and OpenHRP</description>
   <license>BSD</license>
   <maintainer email="k-okada@jsk.t.u-tokyo.ac.jp">Kei Okada</maintainer>
diff --git a/rtmbuild/scripts/idl2srv.py b/rtmbuild/scripts/idl2srv.py
index b0d866d..5160261 100755
--- a/rtmbuild/scripts/idl2srv.py
+++ b/rtmbuild/scripts/idl2srv.py
@@ -465,7 +465,13 @@ class ServiceVisitor (idlvisitor.AstVisitor):
         if all([ os.path.exists(x) and os.stat(x).st_mtime > os.stat(idlfile).st_mtime for x in [Comp_cpp, mod_cpp, mod_h]]) and not options.overwrite:
             return # do not overwrite
 
-        command = "PATH=`rospack find openrtm_aist`/bin:$PATH rtc-template -bcxx --module-name=%s --consumer=%s:service0:'%s' --consumer-idl=%s --idl-include=%s" % (module_name, service_name, service_name, idlfile, idldir)
+        # check if rtc-template exists under `rospack find openrtm_aist`/bin, otherwise use openrtm_aist_PREFIX/lib/openrtm_aist/bin
+        from subprocess import check_output, Popen, PIPE
+        openrtm_path = Popen(['rospack','find','openrtm_aist'], stdout=PIPE).communicate()[0].rstrip() # use Popen, not check_output, since catkin_make can not found rospack find
+        if not os.path.exists(os.path.join(openrtm_path, "bin")) :
+            openrtm_path = os.path.join(check_output(['pkg-config','openrtm-aist','--variable=prefix']).rstrip(),"lib/openrtm_aist")
+        command = "PATH=%s/bin:$PATH rtc-template -bcxx --module-name=%s --consumer=%s:service0:'%s' --consumer-idl=%s --idl-include=%s" % (openrtm_path, module_name, service_name, service_name, idlfile, idldir)
+        #command = "rosrun openrtm_aist rtc-template -bcxx --module-name=%s --consumer=%s:service0:'%s' --consumer-idl=%s --idl-include=%s" % (module_name, service_name, service_name, idlfile, idldir)
         os.system("mkdir -p %s" % tmpdir)
         os.system("mkdir -p %s" % wd)
         os.system("cd %s; yes 2> /dev/null | %s > /dev/null" % (tmpdir, command))
diff --git a/rtmros_common/CHANGELOG.rst b/rtmros_common/CHANGELOG.rst
new file mode 100644
index 0000000..22406d3
--- /dev/null
+++ b/rtmros_common/CHANGELOG.rst
@@ -0,0 +1,37 @@
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Changelog for package rtmros_common
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+1.0.7 (2014-03-20)
+------------------
+
+1.0.6
+-----
+* rtmros_common-1.0.6
+* (rtmros_common, openrtm_ros_bridge, hrpsys_ros_bridge) Cleaning and elaborating package.xml
+
+1.0.5
+-----
+* "rtmros_common-1.0.5"
+
+1.0.4
+-----
+* "rtmros_common-1.0.4"
+
+1.0.3
+-----
+* "rtmros_common-1.0.3"
+
+1.0.2
+-----
+* "rtmros_common-1.0.2"
+
+1.0.1
+-----
+* rtmros_common) 1.0.1
+* rtmros_common) Revert wrong commit r5588
+* rtmros_common) 1.0.1
+* add hrpsys_ros_bridge to run build
+* rtmros_common) Increment version to 1.0.0 (based on discussion https://code.google.com/p/rtm-ros-robotics/issues/detail?id=156&thanks=156&ts=1375860209).
+* Add a ROS metapackage rtmros_common.
+* Contributors: gm130s@gmail.com, kei.okada
diff --git a/rtmros_common/package.xml b/rtmros_common/package.xml
index 1fccadb..3a74c15 100644
--- a/rtmros_common/package.xml
+++ b/rtmros_common/package.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <package>
   <name>rtmros_common</name>
-  <version>1.0.6</version>
+  <version>1.0.7</version>
   <description>A package suite that provides all the capabilities for
     the ROS users to connect to the robots that run on
     <a href = "http://www.openrtm.org/openrtm/en/content/what-rt-middleware-0">RT Middleware</a>
-- 
1.7.9.5

